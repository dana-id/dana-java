/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import id.dana.invoker.ApiClient;
import id.dana.invoker.model.exception.DanaException;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.http.*;

import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;

import id.dana.widget.v1.model.AccountUnbindingRequest;
import id.dana.widget.v1.model.AccountUnbindingResponse;
import id.dana.widget.v1.model.ApplyOTTRequest;
import id.dana.widget.v1.model.ApplyOTTResponse;
import id.dana.widget.v1.model.ApplyTokenRequest;
import id.dana.widget.v1.model.ApplyTokenResponse;
import id.dana.widget.v1.model.CancelOrderRequest;
import id.dana.widget.v1.model.CancelOrderResponse;
import id.dana.widget.v1.model.QueryPaymentRequest;
import id.dana.widget.v1.model.QueryPaymentResponse;
import id.dana.widget.v1.model.RefundOrderRequest;
import id.dana.widget.v1.model.RefundOrderResponse;
import id.dana.widget.v1.model.WidgetPaymentRequest;
import id.dana.widget.v1.model.WidgetPaymentResponse;

import java.io.IOException;

interface WidgetApiService {

  /**
   * Account unbinding - Binding
   * This API is used to reverses the account binding process by revoking the accessToken and refreshToken
   * @param accountUnbindingRequest  (required)
   * @return Call&lt;AccountUnbindingResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/108">Account unbinding - Binding Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B2C"
  })
  @POST("v1.0/registration-account-unbinding.htm")
  Call<AccountUnbindingResponse> accountUnbinding(
    @retrofit2.http.Body AccountUnbindingRequest accountUnbindingRequest
  );

  /**
   * Apply OTT - Widget
   * This API is used to get one time token that will be used as authorization parameter upon redirecting to DANA
   * @param applyOTTRequest  (required)
   * @return Call&lt;ApplyOTTResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/109">Apply OTT - Widget Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B2C"
  })
  @POST("rest/v1.1/qr/apply-ott")
  Call<ApplyOTTResponse> applyOTT(
    @retrofit2.http.Body ApplyOTTRequest applyOTTRequest
  );

  /**
   * Apply Token, required by Apply OTT - Binding
   * This API is used to finalized account binding process by exchanging the authCode into accessToken that can be used as user authorization
   * @param applyTokenRequest  (required)
   * @return Call&lt;ApplyTokenResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/110">Apply Token, required by Apply OTT - Binding Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_APPLY_TOKEN"
  })
  @POST("v1.0/access-token/b2b2c.htm")
  Call<ApplyTokenResponse> applyToken(
    @retrofit2.http.Body ApplyTokenRequest applyTokenRequest
  );

  /**
   * Cancel Order - Widget
   * This API is used to cancel the order from merchant&#39;s platform to DANA
   * @param cancelOrderRequest  (required)
   * @return Call&lt;CancelOrderResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/117">Cancel Order - Widget Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/debit/cancel.htm")
  Call<CancelOrderResponse> cancelOrder(
    @retrofit2.http.Body CancelOrderRequest cancelOrderRequest
  );

  /**
   * Query Payment - Widget
   * This API is used to inquiry payment status and information from merchant&#39;s platform to DANA
   * @param queryPaymentRequest  (required)
   * @return Call&lt;QueryPaymentResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/126">Query Payment - Widget Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("rest/v1.1/debit/status")
  Call<QueryPaymentResponse> queryPayment(
    @retrofit2.http.Body QueryPaymentRequest queryPaymentRequest
  );

  /**
   * Refund Order - Widget
   * This API is used to refund the order from merchant&#39;s platform to DANA
   * @param refundOrderRequest  (required)
   * @return Call&lt;RefundOrderResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/127">Refund Order - Widget Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/debit/refund.htm")
  Call<RefundOrderResponse> refundOrder(
    @retrofit2.http.Body RefundOrderRequest refundOrderRequest
  );

  /**
   * Widget Payment - Widget
   * This API is used to initiate payment from merchant&#39;s platform to DANA
   * @param widgetPaymentRequest  (required)
   * @return Call&lt;WidgetPaymentResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/122">Widget Payment - Widget Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("rest/redirection/v1.0/debit/payment-host-to-host")
  Call<WidgetPaymentResponse> widgetPayment(
    @retrofit2.http.Body WidgetPaymentRequest widgetPaymentRequest
  );

}

public class WidgetApi {

  private static final ObjectMapper objectMapper = new ObjectMapper();

  private final WidgetApiService service;

  public WidgetApi(OkHttpClient client) {
    this.service = new ApiClient(client).createService(WidgetApiService.class);
  }

  /**
   * Account unbinding - Binding
   * This API is used to reverses the account binding process by revoking the accessToken and refreshToken
   * @param accountUnbindingRequest  (required)
   * @return Call&lt;AccountUnbindingResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/108">Account unbinding - Binding Documentation</a>
   */
  public AccountUnbindingResponse accountUnbinding(
    @retrofit2.http.Body AccountUnbindingRequest accountUnbindingRequest
  ) {
    try {
      Response<AccountUnbindingResponse> response = service.accountUnbinding(accountUnbindingRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), AccountUnbindingResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Apply OTT - Widget
   * This API is used to get one time token that will be used as authorization parameter upon redirecting to DANA
   * @param applyOTTRequest  (required)
   * @return Call&lt;ApplyOTTResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/109">Apply OTT - Widget Documentation</a>
   */
  public ApplyOTTResponse applyOTT(
    @retrofit2.http.Body ApplyOTTRequest applyOTTRequest
  ) {
    try {
      Response<ApplyOTTResponse> response = service.applyOTT(applyOTTRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), ApplyOTTResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Apply Token, required by Apply OTT - Binding
   * This API is used to finalized account binding process by exchanging the authCode into accessToken that can be used as user authorization
   * @param applyTokenRequest  (required)
   * @return Call&lt;ApplyTokenResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/110">Apply Token, required by Apply OTT - Binding Documentation</a>
   */
  public ApplyTokenResponse applyToken(
    @retrofit2.http.Body ApplyTokenRequest applyTokenRequest
  ) {
    try {
      Response<ApplyTokenResponse> response = service.applyToken(applyTokenRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), ApplyTokenResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Cancel Order - Widget
   * This API is used to cancel the order from merchant&#39;s platform to DANA
   * @param cancelOrderRequest  (required)
   * @return Call&lt;CancelOrderResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/117">Cancel Order - Widget Documentation</a>
   */
  public CancelOrderResponse cancelOrder(
    @retrofit2.http.Body CancelOrderRequest cancelOrderRequest
  ) {
    try {
      Response<CancelOrderResponse> response = service.cancelOrder(cancelOrderRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), CancelOrderResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Query Payment - Widget
   * This API is used to inquiry payment status and information from merchant&#39;s platform to DANA
   * @param queryPaymentRequest  (required)
   * @return Call&lt;QueryPaymentResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/126">Query Payment - Widget Documentation</a>
   */
  public QueryPaymentResponse queryPayment(
    @retrofit2.http.Body QueryPaymentRequest queryPaymentRequest
  ) {
    try {
      Response<QueryPaymentResponse> response = service.queryPayment(queryPaymentRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), QueryPaymentResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Refund Order - Widget
   * This API is used to refund the order from merchant&#39;s platform to DANA
   * @param refundOrderRequest  (required)
   * @return Call&lt;RefundOrderResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/127">Refund Order - Widget Documentation</a>
   */
  public RefundOrderResponse refundOrder(
    @retrofit2.http.Body RefundOrderRequest refundOrderRequest
  ) {
    try {
      Response<RefundOrderResponse> response = service.refundOrder(refundOrderRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), RefundOrderResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Widget Payment - Widget
   * This API is used to initiate payment from merchant&#39;s platform to DANA
   * @param widgetPaymentRequest  (required)
   * @return Call&lt;WidgetPaymentResponse&gt;
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/122">Widget Payment - Widget Documentation</a>
   */
  public WidgetPaymentResponse widgetPayment(
    @retrofit2.http.Body WidgetPaymentRequest widgetPaymentRequest
  ) {
    try {
      Response<WidgetPaymentResponse> response = service.widgetPayment(widgetPaymentRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), WidgetPaymentResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

}
