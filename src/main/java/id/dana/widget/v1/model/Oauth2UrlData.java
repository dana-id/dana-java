/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.dana.widget.v1.model.Oauth2UrlDataSeamlessData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Data needed to construct Oauth2Url
 */
@JsonPropertyOrder({
  Oauth2UrlData.JSON_PROPERTY_EXTERNAL_ID,
  Oauth2UrlData.JSON_PROPERTY_MERCHANT_ID,
  Oauth2UrlData.JSON_PROPERTY_SUB_MERCHANT_ID,
  Oauth2UrlData.JSON_PROPERTY_SEAMLESS_DATA,
  Oauth2UrlData.JSON_PROPERTY_SCOPES,
  Oauth2UrlData.JSON_PROPERTY_REDIRECT_URL,
  Oauth2UrlData.JSON_PROPERTY_STATE,
  Oauth2UrlData.JSON_PROPERTY_LANG,
  Oauth2UrlData.JSON_PROPERTY_ALLOW_REGISTRATION,
  Oauth2UrlData.JSON_PROPERTY_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class Oauth2UrlData {
  public static final String JSON_PROPERTY_EXTERNAL_ID = "externalId";
  @javax.annotation.Nonnull
  private String externalId;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  @javax.annotation.Nonnull
  private String merchantId;

  public static final String JSON_PROPERTY_SUB_MERCHANT_ID = "subMerchantId";
  @javax.annotation.Nullable
  private String subMerchantId;

  public static final String JSON_PROPERTY_SEAMLESS_DATA = "seamlessData";
  @javax.annotation.Nullable
  private Oauth2UrlDataSeamlessData seamlessData;

  public static final String JSON_PROPERTY_SCOPES = "scopes";
  @javax.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public static final String JSON_PROPERTY_REDIRECT_URL = "redirectUrl";
  @javax.annotation.Nonnull
  private String redirectUrl;

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nullable
  private String state;

  public static final String JSON_PROPERTY_LANG = "lang";
  @javax.annotation.Nullable
  private String lang = "id";

  public static final String JSON_PROPERTY_ALLOW_REGISTRATION = "allowRegistration";
  @javax.annotation.Nullable
  private String allowRegistration = "true";

  /**
   * Mode of the authorization. The possible values are API or DEEPLINK
   */
  public enum ModeEnum {
    API(String.valueOf("API")),
    
    DEEPLINK(String.valueOf("DEEPLINK")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_MODE = "mode";
  @javax.annotation.Nullable
  private ModeEnum mode;

  public Oauth2UrlData() {
  }

  public Oauth2UrlData externalId(@javax.annotation.Nonnull String externalId) {
    
    this.externalId = externalId;
    return this;
  }

  /**
   * Identifier from merchant
   * @return externalId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalId() {
    return externalId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalId(@javax.annotation.Nonnull String externalId) {
    this.externalId = externalId;
  }

  public Oauth2UrlData merchantId(@javax.annotation.Nonnull String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant identifier that is unique per each merchant
   * @return merchantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantId(@javax.annotation.Nonnull String merchantId) {
    this.merchantId = merchantId;
  }

  public Oauth2UrlData subMerchantId(@javax.annotation.Nullable String subMerchantId) {
    
    this.subMerchantId = subMerchantId;
    return this;
  }

  /**
   * Information of sub merchant identifier
   * @return subMerchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubMerchantId() {
    return subMerchantId;
  }


  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubMerchantId(@javax.annotation.Nullable String subMerchantId) {
    this.subMerchantId = subMerchantId;
  }

  public Oauth2UrlData seamlessData(@javax.annotation.Nullable Oauth2UrlDataSeamlessData seamlessData) {
    
    this.seamlessData = seamlessData;
    return this;
  }

  /**
   * Get seamlessData
   * @return seamlessData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEAMLESS_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Oauth2UrlDataSeamlessData getSeamlessData() {
    return seamlessData;
  }


  @JsonProperty(JSON_PROPERTY_SEAMLESS_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeamlessData(@javax.annotation.Nullable Oauth2UrlDataSeamlessData seamlessData) {
    this.seamlessData = seamlessData;
  }

  public Oauth2UrlData scopes(@javax.annotation.Nullable List<String> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public Oauth2UrlData addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * The scopes of the authorization
   * @return scopes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getScopes() {
    return scopes;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }

  public Oauth2UrlData redirectUrl(@javax.annotation.Nonnull String redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * When user authorization is success, the user will be redirected to this URL
   * @return redirectUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRedirectUrl() {
    return redirectUrl;
  }


  @JsonProperty(JSON_PROPERTY_REDIRECT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRedirectUrl(@javax.annotation.Nonnull String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public Oauth2UrlData state(@javax.annotation.Nullable String state) {
    
    this.state = state;
    return this;
  }

  /**
   * Random string for CSRF protection purposes
   * @return state
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }

  public Oauth2UrlData lang(@javax.annotation.Nullable String lang) {
    
    this.lang = lang;
    return this;
  }

  /**
   * Service language code. ISO 639-1
   * @return lang
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLang() {
    return lang;
  }


  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLang(@javax.annotation.Nullable String lang) {
    this.lang = lang;
  }

  public Oauth2UrlData allowRegistration(@javax.annotation.Nullable String allowRegistration) {
    
    this.allowRegistration = allowRegistration;
    return this;
  }

  /**
   * If value equals true, provider may enable registration process during binding. Default true
   * @return allowRegistration
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAllowRegistration() {
    return allowRegistration;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_REGISTRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowRegistration(@javax.annotation.Nullable String allowRegistration) {
    this.allowRegistration = allowRegistration;
  }

  public Oauth2UrlData mode(@javax.annotation.Nullable ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

  /**
   * Mode of the authorization. The possible values are API or DEEPLINK
   * @return mode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ModeEnum getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Oauth2UrlData oauth2UrlData = (Oauth2UrlData) o;
    return Objects.equals(this.externalId, oauth2UrlData.externalId) &&
        Objects.equals(this.merchantId, oauth2UrlData.merchantId) &&
        Objects.equals(this.subMerchantId, oauth2UrlData.subMerchantId) &&
        Objects.equals(this.seamlessData, oauth2UrlData.seamlessData) &&
        Objects.equals(this.scopes, oauth2UrlData.scopes) &&
        Objects.equals(this.redirectUrl, oauth2UrlData.redirectUrl) &&
        Objects.equals(this.state, oauth2UrlData.state) &&
        Objects.equals(this.lang, oauth2UrlData.lang) &&
        Objects.equals(this.allowRegistration, oauth2UrlData.allowRegistration) &&
        Objects.equals(this.mode, oauth2UrlData.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalId, merchantId, subMerchantId, seamlessData, scopes, redirectUrl, state, lang, allowRegistration, mode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Oauth2UrlData {\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    subMerchantId: ").append(toIndentedString(subMerchantId)).append("\n");
    sb.append("    seamlessData: ").append(toIndentedString(seamlessData)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    allowRegistration: ").append(toIndentedString(allowRegistration)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
