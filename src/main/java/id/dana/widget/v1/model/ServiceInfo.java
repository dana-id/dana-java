/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ServiceInfo
 */
@JsonPropertyOrder({
  ServiceInfo.JSON_PROPERTY_SERVICE_TYPE,
  ServiceInfo.JSON_PROPERTY_SERVICE_SCENARIO,
  ServiceInfo.JSON_PROPERTY_EXTEND_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ServiceInfo {
  /**
   * Gets or Sets serviceType
   */
  public enum ServiceTypeEnum {
    PARKING(String.valueOf("PARKING")),
    
    INVESTMENT(String.valueOf("INVESTMENT")),
    
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceTypeEnum fromValue(String value) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERVICE_TYPE = "serviceType";
  @javax.annotation.Nullable
  private ServiceTypeEnum serviceType;

  /**
   * Gets or Sets serviceScenario
   */
  public enum ServiceScenarioEnum {
    SCAN_AND_PAY(String.valueOf("SCAN_AND_PAY")),
    
    EXIT_AND_PAY(String.valueOf("EXIT_AND_PAY")),
    
    EMAS_PURCHASE(String.valueOf("EMAS_PURCHASE")),
    
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ServiceScenarioEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ServiceScenarioEnum fromValue(String value) {
      for (ServiceScenarioEnum b : ServiceScenarioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SERVICE_SCENARIO = "serviceScenario";
  @javax.annotation.Nullable
  private ServiceScenarioEnum serviceScenario;

  public static final String JSON_PROPERTY_EXTEND_INFO = "extendInfo";
  @javax.annotation.Nullable
  private String extendInfo;

  public ServiceInfo() {
  }

  public ServiceInfo serviceType(@javax.annotation.Nullable ServiceTypeEnum serviceType) {
    
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceType(@javax.annotation.Nullable ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }

  public ServiceInfo serviceScenario(@javax.annotation.Nullable ServiceScenarioEnum serviceScenario) {
    
    this.serviceScenario = serviceScenario;
    return this;
  }

  /**
   * Get serviceScenario
   * @return serviceScenario
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_SCENARIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ServiceScenarioEnum getServiceScenario() {
    return serviceScenario;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_SCENARIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceScenario(@javax.annotation.Nullable ServiceScenarioEnum serviceScenario) {
    this.serviceScenario = serviceScenario;
  }

  public ServiceInfo extendInfo(@javax.annotation.Nullable String extendInfo) {
    
    this.extendInfo = extendInfo;
    return this;
  }

  /**
   * Extend information
   * @return extendInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtendInfo() {
    return extendInfo;
  }


  @JsonProperty(JSON_PROPERTY_EXTEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtendInfo(@javax.annotation.Nullable String extendInfo) {
    this.extendInfo = extendInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInfo serviceInfo = (ServiceInfo) o;
    return Objects.equals(this.serviceType, serviceInfo.serviceType) &&
        Objects.equals(this.serviceScenario, serviceInfo.serviceScenario) &&
        Objects.equals(this.extendInfo, serviceInfo.extendInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceType, serviceScenario, extendInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInfo {\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    serviceScenario: ").append(toIndentedString(serviceScenario)).append("\n");
    sb.append("    extendInfo: ").append(toIndentedString(extendInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

