/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UserResourceInfo
 */
@JsonPropertyOrder({
  UserResourceInfo.JSON_PROPERTY_RESOURCE_TYPE,
  UserResourceInfo.JSON_PROPERTY_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UserResourceInfo {
  /**
   * Type of user resource
   */
  public enum ResourceTypeEnum {
    BALANCE(String.valueOf("BALANCE")),
    
    TRANSACTION_URL(String.valueOf("TRANSACTION_URL")),
    
    MASK_DANA_ID(String.valueOf("MASK_DANA_ID")),
    
    TOPUP_URL(String.valueOf("TOPUP_URL")),
    
    OTT(String.valueOf("OTT")),
    
    USER_KYC(String.valueOf("USER_KYC")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resourceType";
  @javax.annotation.Nonnull
  private ResourceTypeEnum resourceType;

  public static final String JSON_PROPERTY_VALUE = "value";
  @javax.annotation.Nonnull
  private String value;

  public UserResourceInfo() {
  }

  public UserResourceInfo resourceType(@javax.annotation.Nonnull ResourceTypeEnum resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Type of user resource
   * @return resourceType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceType(@javax.annotation.Nonnull ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }

  public UserResourceInfo value(@javax.annotation.Nonnull String value) {
    
    this.value = value;
    return this;
  }

  /**
   * Resource value
   * @return value
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserResourceInfo userResourceInfo = (UserResourceInfo) o;
    return Objects.equals(this.resourceType, userResourceInfo.resourceType) &&
        Objects.equals(this.value, userResourceInfo.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceType, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserResourceInfo {\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
