/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UrlParam
 */
@JsonPropertyOrder({
  UrlParam.JSON_PROPERTY_URL,
  UrlParam.JSON_PROPERTY_TYPE,
  UrlParam.JSON_PROPERTY_IS_DEEPLINK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UrlParam {
  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nonnull
  private String url;

  /**
   * Url param. The enums:<br> * PAY_RETURN - When finish payment, DANA will notify to the URL that has been defined by<br> * NOTIFICATION - After the payment, the user will be redirected to merchant page, this is mandatory<br> 
   */
  public enum TypeEnum {
    /**
     * When finish payment, DANA will notify to the URL that has been defined by
     */
    PAY_RETURN(String.valueOf("PAY_RETURN")),
    
    /**
     * After the payment, the user will be redirected to merchant page, this is mandatory
     */
    NOTIFICATION(String.valueOf("NOTIFICATION")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String JSON_PROPERTY_IS_DEEPLINK = "isDeeplink";
  @javax.annotation.Nonnull
  private String isDeeplink;

  public UrlParam() {
  }

  public UrlParam url(@javax.annotation.Nonnull String url) {
    
    this.url = url;
    return this;
  }

  /**
   * URL link
   * @return url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }

  public UrlParam type(@javax.annotation.Nonnull TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Url param. The enums:<br> * PAY_RETURN - When finish payment, DANA will notify to the URL that has been defined by<br> * NOTIFICATION - After the payment, the user will be redirected to merchant page, this is mandatory<br> 
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }

  public UrlParam isDeeplink(@javax.annotation.Nonnull String isDeeplink) {
    
    this.isDeeplink = isDeeplink;
    return this;
  }

  /**
   * Deeplink URL or not
   * @return isDeeplink
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_DEEPLINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIsDeeplink() {
    return isDeeplink;
  }


  @JsonProperty(JSON_PROPERTY_IS_DEEPLINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsDeeplink(@javax.annotation.Nonnull String isDeeplink) {
    this.isDeeplink = isDeeplink;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlParam urlParam = (UrlParam) o;
    return Objects.equals(this.url, urlParam.url) &&
        Objects.equals(this.type, urlParam.type) &&
        Objects.equals(this.isDeeplink, urlParam.isDeeplink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, type, isDeeplink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlParam {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isDeeplink: ").append(toIndentedString(isDeeplink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
