/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.widget.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.dana.widget.v1.model.Money;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AccountInfo
 */
@JsonPropertyOrder({
  AccountInfo.JSON_PROPERTY_BALANCE_TYPE,
  AccountInfo.JSON_PROPERTY_AMOUNT,
  AccountInfo.JSON_PROPERTY_FLOAT_AMOUNT,
  AccountInfo.JSON_PROPERTY_HOLD_AMOUNT,
  AccountInfo.JSON_PROPERTY_AVAILABLE_BALANCE,
  AccountInfo.JSON_PROPERTY_LEDGER_BALANCE,
  AccountInfo.JSON_PROPERTY_CURRENT_MULTILATERAL_LIMIT,
  AccountInfo.JSON_PROPERTY_REGISTRATION_STATUS_CODE,
  AccountInfo.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class AccountInfo {
  public static final String JSON_PROPERTY_BALANCE_TYPE = "balanceType";
  @javax.annotation.Nullable
  private String balanceType;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nullable
  private Money amount;

  public static final String JSON_PROPERTY_FLOAT_AMOUNT = "floatAmount";
  @javax.annotation.Nullable
  private Money floatAmount;

  public static final String JSON_PROPERTY_HOLD_AMOUNT = "holdAmount";
  @javax.annotation.Nullable
  private Money holdAmount;

  public static final String JSON_PROPERTY_AVAILABLE_BALANCE = "availableBalance";
  @javax.annotation.Nullable
  private Money availableBalance;

  public static final String JSON_PROPERTY_LEDGER_BALANCE = "ledgerBalance";
  @javax.annotation.Nullable
  private Money ledgerBalance;

  public static final String JSON_PROPERTY_CURRENT_MULTILATERAL_LIMIT = "currentMultilateralLimit";
  @javax.annotation.Nullable
  private Money currentMultilateralLimit;

  public static final String JSON_PROPERTY_REGISTRATION_STATUS_CODE = "registrationStatusCode";
  @javax.annotation.Nullable
  private String registrationStatusCode;

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nullable
  private String status;

  public AccountInfo() {
  }

  public AccountInfo balanceType(@javax.annotation.Nullable String balanceType) {
    
    this.balanceType = balanceType;
    return this;
  }

  /**
   * Account information of balance type to specify which balance type expected to be returned. Will return all available balance type if this parameter empty
   * @return balanceType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BALANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBalanceType() {
    return balanceType;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBalanceType(@javax.annotation.Nullable String balanceType) {
    this.balanceType = balanceType;
  }

  public AccountInfo amount(@javax.annotation.Nullable Money amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Account information of amount which include the net active amount. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@javax.annotation.Nullable Money amount) {
    this.amount = amount;
  }

  public AccountInfo floatAmount(@javax.annotation.Nullable Money floatAmount) {
    
    this.floatAmount = floatAmount;
    return this;
  }

  /**
   * Account information of float amount which include the inactive amount due to cut off period. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return floatAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLOAT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getFloatAmount() {
    return floatAmount;
  }


  @JsonProperty(JSON_PROPERTY_FLOAT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFloatAmount(@javax.annotation.Nullable Money floatAmount) {
    this.floatAmount = floatAmount;
  }

  public AccountInfo holdAmount(@javax.annotation.Nullable Money holdAmount) {
    
    this.holdAmount = holdAmount;
    return this;
  }

  /**
   * Account information of hold amount which include the unusable amount due to certain type of transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return holdAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOLD_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getHoldAmount() {
    return holdAmount;
  }


  @JsonProperty(JSON_PROPERTY_HOLD_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHoldAmount(@javax.annotation.Nullable Money holdAmount) {
    this.holdAmount = holdAmount;
  }

  public AccountInfo availableBalance(@javax.annotation.Nullable Money availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

  /**
   * Account information of available balance which include the active amount that can be used for transaction. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return availableBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getAvailableBalance() {
    return availableBalance;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBalance(@javax.annotation.Nullable Money availableBalance) {
    this.availableBalance = availableBalance;
  }

  public AccountInfo ledgerBalance(@javax.annotation.Nullable Money ledgerBalance) {
    
    this.ledgerBalance = ledgerBalance;
    return this;
  }

  /**
   * Account information of ledger balance which include the starting balance for this day. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return ledgerBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEDGER_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getLedgerBalance() {
    return ledgerBalance;
  }


  @JsonProperty(JSON_PROPERTY_LEDGER_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLedgerBalance(@javax.annotation.Nullable Money ledgerBalance) {
    this.ledgerBalance = ledgerBalance;
  }

  public AccountInfo currentMultilateralLimit(@javax.annotation.Nullable Money currentMultilateralLimit) {
    
    this.currentMultilateralLimit = currentMultilateralLimit;
    return this;
  }

  /**
   * Account information of current multilateral limit. Contains two sub-fields:<br> 1. Value: Amount, including the cents<br> 2. Currency: Currency code based on ISO 
   * @return currentMultilateralLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_MULTILATERAL_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getCurrentMultilateralLimit() {
    return currentMultilateralLimit;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_MULTILATERAL_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentMultilateralLimit(@javax.annotation.Nullable Money currentMultilateralLimit) {
    this.currentMultilateralLimit = currentMultilateralLimit;
  }

  public AccountInfo registrationStatusCode(@javax.annotation.Nullable String registrationStatusCode) {
    
    this.registrationStatusCode = registrationStatusCode;
    return this;
  }

  /**
   * Account information of customer registration status
   * @return registrationStatusCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTRATION_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegistrationStatusCode() {
    return registrationStatusCode;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRATION_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegistrationStatusCode(@javax.annotation.Nullable String registrationStatusCode) {
    this.registrationStatusCode = registrationStatusCode;
  }

  public AccountInfo status(@javax.annotation.Nullable String status) {
    
    this.status = status;
    return this;
  }

  /**
   * Account information of status. The values include:<br> 1 = Active Account<br> 2 = Closed Account<br> 4 = New Account<br> 6 = Restricted Account<br> 7 = Frozen Account 
   * @return status
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountInfo accountInfo = (AccountInfo) o;
    return Objects.equals(this.balanceType, accountInfo.balanceType) &&
        Objects.equals(this.amount, accountInfo.amount) &&
        Objects.equals(this.floatAmount, accountInfo.floatAmount) &&
        Objects.equals(this.holdAmount, accountInfo.holdAmount) &&
        Objects.equals(this.availableBalance, accountInfo.availableBalance) &&
        Objects.equals(this.ledgerBalance, accountInfo.ledgerBalance) &&
        Objects.equals(this.currentMultilateralLimit, accountInfo.currentMultilateralLimit) &&
        Objects.equals(this.registrationStatusCode, accountInfo.registrationStatusCode) &&
        Objects.equals(this.status, accountInfo.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceType, amount, floatAmount, holdAmount, availableBalance, ledgerBalance, currentMultilateralLimit, registrationStatusCode, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountInfo {\n");
    sb.append("    balanceType: ").append(toIndentedString(balanceType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    floatAmount: ").append(toIndentedString(floatAmount)).append("\n");
    sb.append("    holdAmount: ").append(toIndentedString(holdAmount)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    ledgerBalance: ").append(toIndentedString(ledgerBalance)).append("\n");
    sb.append("    currentMultilateralLimit: ").append(toIndentedString(currentMultilateralLimit)).append("\n");
    sb.append("    registrationStatusCode: ").append(toIndentedString(registrationStatusCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
