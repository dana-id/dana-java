/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.merchantmanagement.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.dana.merchantmanagement.v1.model.AddressInfo;
import id.dana.merchantmanagement.v1.model.BusinessDocs;
import id.dana.merchantmanagement.v1.model.CreateDivisionRequestExtInfo;
import id.dana.merchantmanagement.v1.model.MobileNoInfo;
import id.dana.merchantmanagement.v1.model.PicInfo;
import id.dana.merchantmanagement.v1.model.UserName;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateDivisionRequest
 */
@JsonPropertyOrder({
  CreateDivisionRequest.JSON_PROPERTY_API_VERSION,
  CreateDivisionRequest.JSON_PROPERTY_MERCHANT_ID,
  CreateDivisionRequest.JSON_PROPERTY_PARENT_DIVISION_ID,
  CreateDivisionRequest.JSON_PROPERTY_PARENT_ROLE_TYPE,
  CreateDivisionRequest.JSON_PROPERTY_DIVISION_NAME,
  CreateDivisionRequest.JSON_PROPERTY_DIVISION_ADDRESS,
  CreateDivisionRequest.JSON_PROPERTY_DIVISION_DESCRIPTION,
  CreateDivisionRequest.JSON_PROPERTY_DIVISION_TYPE,
  CreateDivisionRequest.JSON_PROPERTY_EXTERNAL_DIVISION_ID,
  CreateDivisionRequest.JSON_PROPERTY_LOGO_URL_MAP,
  CreateDivisionRequest.JSON_PROPERTY_EXT_INFO,
  CreateDivisionRequest.JSON_PROPERTY_MCC_CODES,
  CreateDivisionRequest.JSON_PROPERTY_BUSINESS_DOCS,
  CreateDivisionRequest.JSON_PROPERTY_BUSINESS_ENTITY,
  CreateDivisionRequest.JSON_PROPERTY_OWNER_NAME,
  CreateDivisionRequest.JSON_PROPERTY_OWNER_PHONE_NUMBER,
  CreateDivisionRequest.JSON_PROPERTY_OWNER_ID_TYPE,
  CreateDivisionRequest.JSON_PROPERTY_OWNER_ID_NO,
  CreateDivisionRequest.JSON_PROPERTY_OWNER_ADDRESS,
  CreateDivisionRequest.JSON_PROPERTY_DIRECTOR_PICS,
  CreateDivisionRequest.JSON_PROPERTY_NON_DIRECTOR_PICS,
  CreateDivisionRequest.JSON_PROPERTY_SIZE_TYPE,
  CreateDivisionRequest.JSON_PROPERTY_PG_DIVISION_FLAG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CreateDivisionRequest {
  public static final String JSON_PROPERTY_API_VERSION = "apiVersion";
  @javax.annotation.Nonnull
  private String apiVersion;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  @javax.annotation.Nonnull
  private String merchantId;

  public static final String JSON_PROPERTY_PARENT_DIVISION_ID = "parentDivisionId";
  @javax.annotation.Nullable
  private String parentDivisionId;

  /**
   * Type of parent role
   */
  public enum ParentRoleTypeEnum {
    MERCHANT(String.valueOf("MERCHANT")),
    
    DIVISION(String.valueOf("DIVISION")),
    
    EXTERNAL_DIVISION(String.valueOf("EXTERNAL_DIVISION")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ParentRoleTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ParentRoleTypeEnum fromValue(String value) {
      for (ParentRoleTypeEnum b : ParentRoleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_PARENT_ROLE_TYPE = "parentRoleType";
  @javax.annotation.Nonnull
  private ParentRoleTypeEnum parentRoleType;

  public static final String JSON_PROPERTY_DIVISION_NAME = "divisionName";
  @javax.annotation.Nonnull
  private String divisionName;

  public static final String JSON_PROPERTY_DIVISION_ADDRESS = "divisionAddress";
  @javax.annotation.Nonnull
  private AddressInfo divisionAddress;

  public static final String JSON_PROPERTY_DIVISION_DESCRIPTION = "divisionDescription";
  @javax.annotation.Nullable
  private String divisionDescription;

  /**
   * Division type
   */
  public enum DivisionTypeEnum {
    REGION(String.valueOf("REGION")),
    
    AREA(String.valueOf("AREA")),
    
    BRANCH(String.valueOf("BRANCH")),
    
    OUTLET(String.valueOf("OUTLET")),
    
    STORE(String.valueOf("STORE")),
    
    KIOSK(String.valueOf("KIOSK")),
    
    STALL(String.valueOf("STALL")),
    
    COUNTER(String.valueOf("COUNTER")),
    
    BOOTH(String.valueOf("BOOTH")),
    
    POINT_OF_SALE(String.valueOf("POINT_OF_SALE")),
    
    VENDING_MACHINE(String.valueOf("VENDING_MACHINE")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    DivisionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DivisionTypeEnum fromValue(String value) {
      for (DivisionTypeEnum b : DivisionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_DIVISION_TYPE = "divisionType";
  @javax.annotation.Nonnull
  private DivisionTypeEnum divisionType;

  public static final String JSON_PROPERTY_EXTERNAL_DIVISION_ID = "externalDivisionId";
  @javax.annotation.Nonnull
  private String externalDivisionId;

  public static final String JSON_PROPERTY_LOGO_URL_MAP = "logoUrlMap";
  @javax.annotation.Nullable
  private Map<String, String> logoUrlMap = new HashMap<>();

  public static final String JSON_PROPERTY_EXT_INFO = "extInfo";
  @javax.annotation.Nonnull
  private CreateDivisionRequestExtInfo extInfo;

  public static final String JSON_PROPERTY_MCC_CODES = "mccCodes";
  @javax.annotation.Nonnull
  private List<String> mccCodes = new ArrayList<>();

  public static final String JSON_PROPERTY_BUSINESS_DOCS = "businessDocs";
  @javax.annotation.Nonnull
  private List<BusinessDocs> businessDocs = new ArrayList<>();

  /**
   * Business entity type
   */
  public enum BusinessEntityEnum {
    PT(String.valueOf("pt")),
    
    CV(String.valueOf("cv")),
    
    INDIVIDU(String.valueOf("individu")),
    
    USAHA_DAGANG(String.valueOf("usaha_dagang")),
    
    YAYASAN(String.valueOf("yayasan")),
    
    KOPERASI(String.valueOf("koperasi")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    BusinessEntityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BusinessEntityEnum fromValue(String value) {
      for (BusinessEntityEnum b : BusinessEntityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_BUSINESS_ENTITY = "businessEntity";
  @javax.annotation.Nonnull
  private BusinessEntityEnum businessEntity;

  public static final String JSON_PROPERTY_OWNER_NAME = "ownerName";
  @javax.annotation.Nonnull
  private UserName ownerName;

  public static final String JSON_PROPERTY_OWNER_PHONE_NUMBER = "ownerPhoneNumber";
  @javax.annotation.Nonnull
  private MobileNoInfo ownerPhoneNumber;

  /**
   * Owner identifier type
   */
  public enum OwnerIdTypeEnum {
    KTP(String.valueOf("KTP")),
    
    SIM(String.valueOf("SIM")),
    
    PASSPORT(String.valueOf("PASSPORT")),
    
    SIUP(String.valueOf("SIUP")),
    
    NIB(String.valueOf("NIB")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    OwnerIdTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OwnerIdTypeEnum fromValue(String value) {
      for (OwnerIdTypeEnum b : OwnerIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_OWNER_ID_TYPE = "ownerIdType";
  @javax.annotation.Nonnull
  private OwnerIdTypeEnum ownerIdType;

  public static final String JSON_PROPERTY_OWNER_ID_NO = "ownerIdNo";
  @javax.annotation.Nonnull
  private String ownerIdNo;

  public static final String JSON_PROPERTY_OWNER_ADDRESS = "ownerAddress";
  @javax.annotation.Nonnull
  private AddressInfo ownerAddress;

  public static final String JSON_PROPERTY_DIRECTOR_PICS = "directorPics";
  @javax.annotation.Nonnull
  private List<PicInfo> directorPics = new ArrayList<>();

  public static final String JSON_PROPERTY_NON_DIRECTOR_PICS = "nonDirectorPics";
  @javax.annotation.Nonnull
  private List<PicInfo> nonDirectorPics = new ArrayList<>();

  /**
   * Size type
   */
  public enum SizeTypeEnum {
    UMI(String.valueOf("UMI")),
    
    UKE(String.valueOf("UKE")),
    
    UME(String.valueOf("UME")),
    
    UBE(String.valueOf("UBE")),
    
    URE(String.valueOf("URE")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    SizeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SizeTypeEnum fromValue(String value) {
      for (SizeTypeEnum b : SizeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_SIZE_TYPE = "sizeType";
  @javax.annotation.Nonnull
  private SizeTypeEnum sizeType;

  /**
   * Flag if division is type PG
   */
  public enum PgDivisionFlagEnum {
    TRUE(String.valueOf("true")),
    
    FALSE(String.valueOf("false")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    PgDivisionFlagEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PgDivisionFlagEnum fromValue(String value) {
      for (PgDivisionFlagEnum b : PgDivisionFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_PG_DIVISION_FLAG = "pgDivisionFlag";
  @javax.annotation.Nullable
  private PgDivisionFlagEnum pgDivisionFlag;

  public CreateDivisionRequest() {
  }

  public CreateDivisionRequest apiVersion(@javax.annotation.Nonnull String apiVersion) {
    
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * API Version. As per the respective API reference. Must be > 2
   * @return apiVersion
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApiVersion() {
    return apiVersion;
  }


  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApiVersion(@javax.annotation.Nonnull String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public CreateDivisionRequest merchantId(@javax.annotation.Nonnull String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant identifier
   * @return merchantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantId(@javax.annotation.Nonnull String merchantId) {
    this.merchantId = merchantId;
  }

  public CreateDivisionRequest parentDivisionId(@javax.annotation.Nullable String parentDivisionId) {
    
    this.parentDivisionId = parentDivisionId;
    return this;
  }

  /**
   * Parent division identifier. Required when parentRoleType is DIVISION or EXTERNAL_DIVISION. Length depends on parentRoleType - DIVISION (21 max), EXTERNAL_DIVISION (64 max)
   * @return parentDivisionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentDivisionId() {
    return parentDivisionId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentDivisionId(@javax.annotation.Nullable String parentDivisionId) {
    this.parentDivisionId = parentDivisionId;
  }

  public CreateDivisionRequest parentRoleType(@javax.annotation.Nonnull ParentRoleTypeEnum parentRoleType) {
    
    this.parentRoleType = parentRoleType;
    return this;
  }

  /**
   * Type of parent role
   * @return parentRoleType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_ROLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ParentRoleTypeEnum getParentRoleType() {
    return parentRoleType;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ROLE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentRoleType(@javax.annotation.Nonnull ParentRoleTypeEnum parentRoleType) {
    this.parentRoleType = parentRoleType;
  }

  public CreateDivisionRequest divisionName(@javax.annotation.Nonnull String divisionName) {
    
    this.divisionName = divisionName;
    return this;
  }

  /**
   * Division name
   * @return divisionName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIVISION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDivisionName() {
    return divisionName;
  }


  @JsonProperty(JSON_PROPERTY_DIVISION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDivisionName(@javax.annotation.Nonnull String divisionName) {
    this.divisionName = divisionName;
  }

  public CreateDivisionRequest divisionAddress(@javax.annotation.Nonnull AddressInfo divisionAddress) {
    
    this.divisionAddress = divisionAddress;
    return this;
  }

  /**
   * Get divisionAddress
   * @return divisionAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIVISION_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AddressInfo getDivisionAddress() {
    return divisionAddress;
  }


  @JsonProperty(JSON_PROPERTY_DIVISION_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDivisionAddress(@javax.annotation.Nonnull AddressInfo divisionAddress) {
    this.divisionAddress = divisionAddress;
  }

  public CreateDivisionRequest divisionDescription(@javax.annotation.Nullable String divisionDescription) {
    
    this.divisionDescription = divisionDescription;
    return this;
  }

  /**
   * Division description
   * @return divisionDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIVISION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDivisionDescription() {
    return divisionDescription;
  }


  @JsonProperty(JSON_PROPERTY_DIVISION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDivisionDescription(@javax.annotation.Nullable String divisionDescription) {
    this.divisionDescription = divisionDescription;
  }

  public CreateDivisionRequest divisionType(@javax.annotation.Nonnull DivisionTypeEnum divisionType) {
    
    this.divisionType = divisionType;
    return this;
  }

  /**
   * Division type
   * @return divisionType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIVISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DivisionTypeEnum getDivisionType() {
    return divisionType;
  }


  @JsonProperty(JSON_PROPERTY_DIVISION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDivisionType(@javax.annotation.Nonnull DivisionTypeEnum divisionType) {
    this.divisionType = divisionType;
  }

  public CreateDivisionRequest externalDivisionId(@javax.annotation.Nonnull String externalDivisionId) {
    
    this.externalDivisionId = externalDivisionId;
    return this;
  }

  /**
   * External division identifier
   * @return externalDivisionId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalDivisionId() {
    return externalDivisionId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalDivisionId(@javax.annotation.Nonnull String externalDivisionId) {
    this.externalDivisionId = externalDivisionId;
  }

  public CreateDivisionRequest logoUrlMap(@javax.annotation.Nullable Map<String, String> logoUrlMap) {
    
    this.logoUrlMap = logoUrlMap;
    return this;
  }

  public CreateDivisionRequest putLogoUrlMapItem(String key, String logoUrlMapItem) {
    if (this.logoUrlMap == null) {
      this.logoUrlMap = new HashMap<>();
    }
    this.logoUrlMap.put(key, logoUrlMapItem);
    return this;
  }

  /**
   * Logo URL map with base64 encoded images. Keys can be LOGO, PC_LOGO, MOBILE_LOGO
   * @return logoUrlMap
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGO_URL_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getLogoUrlMap() {
    return logoUrlMap;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_URL_MAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogoUrlMap(@javax.annotation.Nullable Map<String, String> logoUrlMap) {
    this.logoUrlMap = logoUrlMap;
  }

  public CreateDivisionRequest extInfo(@javax.annotation.Nonnull CreateDivisionRequestExtInfo extInfo) {
    
    this.extInfo = extInfo;
    return this;
  }

  /**
   * Get extInfo
   * @return extInfo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXT_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateDivisionRequestExtInfo getExtInfo() {
    return extInfo;
  }


  @JsonProperty(JSON_PROPERTY_EXT_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExtInfo(@javax.annotation.Nonnull CreateDivisionRequestExtInfo extInfo) {
    this.extInfo = extInfo;
  }

  public CreateDivisionRequest mccCodes(@javax.annotation.Nonnull List<String> mccCodes) {
    
    this.mccCodes = mccCodes;
    return this;
  }

  public CreateDivisionRequest addMccCodesItem(String mccCodesItem) {
    if (this.mccCodes == null) {
      this.mccCodes = new ArrayList<>();
    }
    this.mccCodes.add(mccCodesItem);
    return this;
  }

  /**
   * Merchant category codes
   * @return mccCodes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MCC_CODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getMccCodes() {
    return mccCodes;
  }


  @JsonProperty(JSON_PROPERTY_MCC_CODES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMccCodes(@javax.annotation.Nonnull List<String> mccCodes) {
    this.mccCodes = mccCodes;
  }

  public CreateDivisionRequest businessDocs(@javax.annotation.Nonnull List<BusinessDocs> businessDocs) {
    
    this.businessDocs = businessDocs;
    return this;
  }

  public CreateDivisionRequest addBusinessDocsItem(BusinessDocs businessDocsItem) {
    if (this.businessDocs == null) {
      this.businessDocs = new ArrayList<>();
    }
    this.businessDocs.add(businessDocsItem);
    return this;
  }

  /**
   * Business documents. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
   * @return businessDocs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUSINESS_DOCS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<BusinessDocs> getBusinessDocs() {
    return businessDocs;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_DOCS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBusinessDocs(@javax.annotation.Nonnull List<BusinessDocs> businessDocs) {
    this.businessDocs = businessDocs;
  }

  public CreateDivisionRequest businessEntity(@javax.annotation.Nonnull BusinessEntityEnum businessEntity) {
    
    this.businessEntity = businessEntity;
    return this;
  }

  /**
   * Business entity type
   * @return businessEntity
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUSINESS_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BusinessEntityEnum getBusinessEntity() {
    return businessEntity;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_ENTITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBusinessEntity(@javax.annotation.Nonnull BusinessEntityEnum businessEntity) {
    this.businessEntity = businessEntity;
  }

  public CreateDivisionRequest ownerName(@javax.annotation.Nonnull UserName ownerName) {
    
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UserName getOwnerName() {
    return ownerName;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerName(@javax.annotation.Nonnull UserName ownerName) {
    this.ownerName = ownerName;
  }

  public CreateDivisionRequest ownerPhoneNumber(@javax.annotation.Nonnull MobileNoInfo ownerPhoneNumber) {
    
    this.ownerPhoneNumber = ownerPhoneNumber;
    return this;
  }

  /**
   * Get ownerPhoneNumber
   * @return ownerPhoneNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MobileNoInfo getOwnerPhoneNumber() {
    return ownerPhoneNumber;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerPhoneNumber(@javax.annotation.Nonnull MobileNoInfo ownerPhoneNumber) {
    this.ownerPhoneNumber = ownerPhoneNumber;
  }

  public CreateDivisionRequest ownerIdType(@javax.annotation.Nonnull OwnerIdTypeEnum ownerIdType) {
    
    this.ownerIdType = ownerIdType;
    return this;
  }

  /**
   * Owner identifier type
   * @return ownerIdType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OwnerIdTypeEnum getOwnerIdType() {
    return ownerIdType;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerIdType(@javax.annotation.Nonnull OwnerIdTypeEnum ownerIdType) {
    this.ownerIdType = ownerIdType;
  }

  public CreateDivisionRequest ownerIdNo(@javax.annotation.Nonnull String ownerIdNo) {
    
    this.ownerIdNo = ownerIdNo;
    return this;
  }

  /**
   * Owner identifier number. Length depends on ownerIdType - KTP (16), SIM (12-14), Passport (8), NIB (>=13), SIUP (free text)
   * @return ownerIdNo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER_ID_NO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwnerIdNo() {
    return ownerIdNo;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ID_NO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerIdNo(@javax.annotation.Nonnull String ownerIdNo) {
    this.ownerIdNo = ownerIdNo;
  }

  public CreateDivisionRequest ownerAddress(@javax.annotation.Nonnull AddressInfo ownerAddress) {
    
    this.ownerAddress = ownerAddress;
    return this;
  }

  /**
   * Get ownerAddress
   * @return ownerAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AddressInfo getOwnerAddress() {
    return ownerAddress;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerAddress(@javax.annotation.Nonnull AddressInfo ownerAddress) {
    this.ownerAddress = ownerAddress;
  }

  public CreateDivisionRequest directorPics(@javax.annotation.Nonnull List<PicInfo> directorPics) {
    
    this.directorPics = directorPics;
    return this;
  }

  public CreateDivisionRequest addDirectorPicsItem(PicInfo directorPicsItem) {
    if (this.directorPics == null) {
      this.directorPics = new ArrayList<>();
    }
    this.directorPics.add(directorPicsItem);
    return this;
  }

  /**
   * Director as a PIC of sub merchant
   * @return directorPics
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIRECTOR_PICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PicInfo> getDirectorPics() {
    return directorPics;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTOR_PICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDirectorPics(@javax.annotation.Nonnull List<PicInfo> directorPics) {
    this.directorPics = directorPics;
  }

  public CreateDivisionRequest nonDirectorPics(@javax.annotation.Nonnull List<PicInfo> nonDirectorPics) {
    
    this.nonDirectorPics = nonDirectorPics;
    return this;
  }

  public CreateDivisionRequest addNonDirectorPicsItem(PicInfo nonDirectorPicsItem) {
    if (this.nonDirectorPics == null) {
      this.nonDirectorPics = new ArrayList<>();
    }
    this.nonDirectorPics.add(nonDirectorPicsItem);
    return this;
  }

  /**
   * Non director which become a PIC of sub merchant
   * @return nonDirectorPics
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NON_DIRECTOR_PICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PicInfo> getNonDirectorPics() {
    return nonDirectorPics;
  }


  @JsonProperty(JSON_PROPERTY_NON_DIRECTOR_PICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonDirectorPics(@javax.annotation.Nonnull List<PicInfo> nonDirectorPics) {
    this.nonDirectorPics = nonDirectorPics;
  }

  public CreateDivisionRequest sizeType(@javax.annotation.Nonnull SizeTypeEnum sizeType) {
    
    this.sizeType = sizeType;
    return this;
  }

  /**
   * Size type
   * @return sizeType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIZE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SizeTypeEnum getSizeType() {
    return sizeType;
  }


  @JsonProperty(JSON_PROPERTY_SIZE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSizeType(@javax.annotation.Nonnull SizeTypeEnum sizeType) {
    this.sizeType = sizeType;
  }

  public CreateDivisionRequest pgDivisionFlag(@javax.annotation.Nullable PgDivisionFlagEnum pgDivisionFlag) {
    
    this.pgDivisionFlag = pgDivisionFlag;
    return this;
  }

  /**
   * Flag if division is type PG
   * @return pgDivisionFlag
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PG_DIVISION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PgDivisionFlagEnum getPgDivisionFlag() {
    return pgDivisionFlag;
  }


  @JsonProperty(JSON_PROPERTY_PG_DIVISION_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPgDivisionFlag(@javax.annotation.Nullable PgDivisionFlagEnum pgDivisionFlag) {
    this.pgDivisionFlag = pgDivisionFlag;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDivisionRequest createDivisionRequest = (CreateDivisionRequest) o;
    return Objects.equals(this.apiVersion, createDivisionRequest.apiVersion) &&
        Objects.equals(this.merchantId, createDivisionRequest.merchantId) &&
        Objects.equals(this.parentDivisionId, createDivisionRequest.parentDivisionId) &&
        Objects.equals(this.parentRoleType, createDivisionRequest.parentRoleType) &&
        Objects.equals(this.divisionName, createDivisionRequest.divisionName) &&
        Objects.equals(this.divisionAddress, createDivisionRequest.divisionAddress) &&
        Objects.equals(this.divisionDescription, createDivisionRequest.divisionDescription) &&
        Objects.equals(this.divisionType, createDivisionRequest.divisionType) &&
        Objects.equals(this.externalDivisionId, createDivisionRequest.externalDivisionId) &&
        Objects.equals(this.logoUrlMap, createDivisionRequest.logoUrlMap) &&
        Objects.equals(this.extInfo, createDivisionRequest.extInfo) &&
        Objects.equals(this.mccCodes, createDivisionRequest.mccCodes) &&
        Objects.equals(this.businessDocs, createDivisionRequest.businessDocs) &&
        Objects.equals(this.businessEntity, createDivisionRequest.businessEntity) &&
        Objects.equals(this.ownerName, createDivisionRequest.ownerName) &&
        Objects.equals(this.ownerPhoneNumber, createDivisionRequest.ownerPhoneNumber) &&
        Objects.equals(this.ownerIdType, createDivisionRequest.ownerIdType) &&
        Objects.equals(this.ownerIdNo, createDivisionRequest.ownerIdNo) &&
        Objects.equals(this.ownerAddress, createDivisionRequest.ownerAddress) &&
        Objects.equals(this.directorPics, createDivisionRequest.directorPics) &&
        Objects.equals(this.nonDirectorPics, createDivisionRequest.nonDirectorPics) &&
        Objects.equals(this.sizeType, createDivisionRequest.sizeType) &&
        Objects.equals(this.pgDivisionFlag, createDivisionRequest.pgDivisionFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, merchantId, parentDivisionId, parentRoleType, divisionName, divisionAddress, divisionDescription, divisionType, externalDivisionId, logoUrlMap, extInfo, mccCodes, businessDocs, businessEntity, ownerName, ownerPhoneNumber, ownerIdType, ownerIdNo, ownerAddress, directorPics, nonDirectorPics, sizeType, pgDivisionFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDivisionRequest {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    parentDivisionId: ").append(toIndentedString(parentDivisionId)).append("\n");
    sb.append("    parentRoleType: ").append(toIndentedString(parentRoleType)).append("\n");
    sb.append("    divisionName: ").append(toIndentedString(divisionName)).append("\n");
    sb.append("    divisionAddress: ").append(toIndentedString(divisionAddress)).append("\n");
    sb.append("    divisionDescription: ").append(toIndentedString(divisionDescription)).append("\n");
    sb.append("    divisionType: ").append(toIndentedString(divisionType)).append("\n");
    sb.append("    externalDivisionId: ").append(toIndentedString(externalDivisionId)).append("\n");
    sb.append("    logoUrlMap: ").append(toIndentedString(logoUrlMap)).append("\n");
    sb.append("    extInfo: ").append(toIndentedString(extInfo)).append("\n");
    sb.append("    mccCodes: ").append(toIndentedString(mccCodes)).append("\n");
    sb.append("    businessDocs: ").append(toIndentedString(businessDocs)).append("\n");
    sb.append("    businessEntity: ").append(toIndentedString(businessEntity)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    ownerPhoneNumber: ").append(toIndentedString(ownerPhoneNumber)).append("\n");
    sb.append("    ownerIdType: ").append(toIndentedString(ownerIdType)).append("\n");
    sb.append("    ownerIdNo: ").append(toIndentedString(ownerIdNo)).append("\n");
    sb.append("    ownerAddress: ").append(toIndentedString(ownerAddress)).append("\n");
    sb.append("    directorPics: ").append(toIndentedString(directorPics)).append("\n");
    sb.append("    nonDirectorPics: ").append(toIndentedString(nonDirectorPics)).append("\n");
    sb.append("    sizeType: ").append(toIndentedString(sizeType)).append("\n");
    sb.append("    pgDivisionFlag: ").append(toIndentedString(pgDivisionFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
