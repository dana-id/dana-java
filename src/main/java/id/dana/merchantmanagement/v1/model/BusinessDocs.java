/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.merchantmanagement.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BusinessDocs
 */
@JsonPropertyOrder({
  BusinessDocs.JSON_PROPERTY_DOC_TYPE,
  BusinessDocs.JSON_PROPERTY_DOC_ID,
  BusinessDocs.JSON_PROPERTY_DOC_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class BusinessDocs {
  /**
   * Document type. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
   */
  public enum DocTypeEnum {
    KTP(String.valueOf("KTP")),
    
    SIM(String.valueOf("SIM")),
    
    SIUP(String.valueOf("SIUP")),
    
    NIB(String.valueOf("NIB")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    DocTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DocTypeEnum fromValue(String value) {
      for (DocTypeEnum b : DocTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_DOC_TYPE = "docType";
  @javax.annotation.Nullable
  private DocTypeEnum docType;

  public static final String JSON_PROPERTY_DOC_ID = "docId";
  @javax.annotation.Nullable
  private String docId;

  public static final String JSON_PROPERTY_DOC_FILE = "docFile";
  @javax.annotation.Nullable
  private String docFile;

  public BusinessDocs() {
  }

  public BusinessDocs docType(@javax.annotation.Nullable DocTypeEnum docType) {
    
    this.docType = docType;
    return this;
  }

  /**
   * Document type. \"individu\" entity can only use KTP and SIM. Other entities can use SIUP and NIB
   * @return docType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DocTypeEnum getDocType() {
    return docType;
  }


  @JsonProperty(JSON_PROPERTY_DOC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocType(@javax.annotation.Nullable DocTypeEnum docType) {
    this.docType = docType;
  }

  public BusinessDocs docId(@javax.annotation.Nullable String docId) {
    
    this.docId = docId;
    return this;
  }

  /**
   * Document ID
   * @return docId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocId() {
    return docId;
  }


  @JsonProperty(JSON_PROPERTY_DOC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocId(@javax.annotation.Nullable String docId) {
    this.docId = docId;
  }

  public BusinessDocs docFile(@javax.annotation.Nullable String docFile) {
    
    this.docFile = docFile;
    return this;
  }

  /**
   * Document file encoded in base64
   * @return docFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOC_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocFile() {
    return docFile;
  }


  @JsonProperty(JSON_PROPERTY_DOC_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocFile(@javax.annotation.Nullable String docFile) {
    this.docFile = docFile;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDocs businessDocs = (BusinessDocs) o;
    return Objects.equals(this.docType, businessDocs.docType) &&
        Objects.equals(this.docId, businessDocs.docId) &&
        Objects.equals(this.docFile, businessDocs.docFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docType, docId, docFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDocs {\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    docFile: ").append(toIndentedString(docFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
