/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.merchantmanagement.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ResultInfo
 */
@JsonPropertyOrder({
  ResultInfo.JSON_PROPERTY_RESULT_STATUS,
  ResultInfo.JSON_PROPERTY_RESULT_CODE_ID,
  ResultInfo.JSON_PROPERTY_RESULT_CODE,
  ResultInfo.JSON_PROPERTY_RESULT_MSG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ResultInfo {
  /**
   * Result status (S=Success, F=Failure, U=Unknown)
   */
  public enum ResultStatusEnum {
    /**
     * Success
     */
    S(String.valueOf("S")),
    
    /**
     * Failure
     */
    F(String.valueOf("F")),
    
    /**
     * Unknown
     */
    U(String.valueOf("U")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ResultStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ResultStatusEnum fromValue(String value) {
      for (ResultStatusEnum b : ResultStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_RESULT_STATUS = "resultStatus";
  @javax.annotation.Nonnull
  private ResultStatusEnum resultStatus;

  public static final String JSON_PROPERTY_RESULT_CODE_ID = "resultCodeId";
  @javax.annotation.Nonnull
  private String resultCodeId;

  public static final String JSON_PROPERTY_RESULT_CODE = "resultCode";
  @javax.annotation.Nonnull
  private String resultCode;

  public static final String JSON_PROPERTY_RESULT_MSG = "resultMsg";
  @javax.annotation.Nonnull
  private String resultMsg;

  public ResultInfo() {
  }

  public ResultInfo resultStatus(@javax.annotation.Nonnull ResultStatusEnum resultStatus) {
    
    this.resultStatus = resultStatus;
    return this;
  }

  /**
   * Result status (S=Success, F=Failure, U=Unknown)
   * @return resultStatus
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResultStatusEnum getResultStatus() {
    return resultStatus;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultStatus(@javax.annotation.Nonnull ResultStatusEnum resultStatus) {
    this.resultStatus = resultStatus;
  }

  public ResultInfo resultCodeId(@javax.annotation.Nonnull String resultCodeId) {
    
    this.resultCodeId = resultCodeId;
    return this;
  }

  /**
   * Result code identifier
   * @return resultCodeId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_CODE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResultCodeId() {
    return resultCodeId;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_CODE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultCodeId(@javax.annotation.Nonnull String resultCodeId) {
    this.resultCodeId = resultCodeId;
  }

  public ResultInfo resultCode(@javax.annotation.Nonnull String resultCode) {
    
    this.resultCode = resultCode;
    return this;
  }

  /**
   * Result code
   * @return resultCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResultCode() {
    return resultCode;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultCode(@javax.annotation.Nonnull String resultCode) {
    this.resultCode = resultCode;
  }

  public ResultInfo resultMsg(@javax.annotation.Nonnull String resultMsg) {
    
    this.resultMsg = resultMsg;
    return this;
  }

  /**
   * Result message
   * @return resultMsg
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_MSG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResultMsg() {
    return resultMsg;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_MSG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultMsg(@javax.annotation.Nonnull String resultMsg) {
    this.resultMsg = resultMsg;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultInfo resultInfo = (ResultInfo) o;
    return Objects.equals(this.resultStatus, resultInfo.resultStatus) &&
        Objects.equals(this.resultCodeId, resultInfo.resultCodeId) &&
        Objects.equals(this.resultCode, resultInfo.resultCode) &&
        Objects.equals(this.resultMsg, resultInfo.resultMsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultStatus, resultCodeId, resultCode, resultMsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultInfo {\n");
    sb.append("    resultStatus: ").append(toIndentedString(resultStatus)).append("\n");
    sb.append("    resultCodeId: ").append(toIndentedString(resultCodeId)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    resultMsg: ").append(toIndentedString(resultMsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
