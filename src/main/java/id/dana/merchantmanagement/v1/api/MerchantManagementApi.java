/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.merchantmanagement.v1.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import id.dana.invoker.ApiClient;
import id.dana.invoker.model.exception.DanaException;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.http.*;

import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;

import id.dana.merchantmanagement.v1.model.CreateDivisionRequest;
import id.dana.merchantmanagement.v1.model.CreateDivisionResponse;
import id.dana.merchantmanagement.v1.model.CreateShopRequest;
import id.dana.merchantmanagement.v1.model.CreateShopResponse;
import id.dana.merchantmanagement.v1.model.QueryDivisionRequest;
import id.dana.merchantmanagement.v1.model.QueryDivisionResponse;
import id.dana.merchantmanagement.v1.model.QueryMerchantResourceRequest;
import id.dana.merchantmanagement.v1.model.QueryMerchantResourceResponse;
import id.dana.merchantmanagement.v1.model.QueryShopRequest;
import id.dana.merchantmanagement.v1.model.QueryShopResponse;
import id.dana.merchantmanagement.v1.model.UpdateDivisionRequest;
import id.dana.merchantmanagement.v1.model.UpdateDivisionResponse;
import id.dana.merchantmanagement.v1.model.UpdateShopRequest;
import id.dana.merchantmanagement.v1.model.UpdateShopResponse;

import java.io.IOException;

interface MerchantManagementApiService {

  /**
   * Create Division
   * This API is used to create a new division
   * @param createDivisionRequest  (required)
   * @return Call&lt;CreateDivisionResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.division.createDivision"
  })
  @POST("dana/merchant/division/createDivision.htm")
  Call<CreateDivisionResponse> createDivision(
    @retrofit2.http.Body CreateDivisionRequest createDivisionRequest
  );

  /**
   * Member – Create Shop
   * Create shop under merchant or division
   * @param createShopRequest  (required)
   * @return Call&lt;CreateShopResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.shop.createShop"
  })
  @POST("dana/merchant/shop/createShop.htm")
  Call<CreateShopResponse> createShop(
    @retrofit2.http.Body CreateShopRequest createShopRequest
  );

  /**
   * Query Division
   * This API is used to obtain information of division
   * @param queryDivisionRequest  (required)
   * @return Call&lt;QueryDivisionResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.division.queryDivision"
  })
  @POST("dana/merchant/division/queryDivision.htm")
  Call<QueryDivisionResponse> queryDivision(
    @retrofit2.http.Body QueryDivisionRequest queryDivisionRequest
  );

  /**
   * Member – Merchant Open API Check Disbursement Account
   * The interface is check merchant resource info (account balance merchant)
   * @param queryMerchantResourceRequest  (required)
   * @return Call&lt;QueryMerchantResourceResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.queryMerchantResource"
  })
  @POST("dana/merchant/queryMerchantResource.htm")
  Call<QueryMerchantResourceResponse> queryMerchantResource(
    @retrofit2.http.Body QueryMerchantResourceRequest queryMerchantResourceRequest
  );

  /**
   * Member – Query Shop
   * This API is used to obtain information of shop information
   * @param queryShopRequest  (required)
   * @return Call&lt;QueryShopResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.shop.queryShop"
  })
  @POST("dana/merchant/shop/queryShop.htm")
  Call<QueryShopResponse> queryShop(
    @retrofit2.http.Body QueryShopRequest queryShopRequest
  );

  /**
   * Update Division
   * This API is used to update the division information
   * @param updateDivisionRequest  (required)
   * @return Call&lt;UpdateDivisionResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.division.updateDivision"
  })
  @POST("dana/merchant/division/updateDivision.htm")
  Call<UpdateDivisionResponse> updateDivision(
    @retrofit2.http.Body UpdateDivisionRequest updateDivisionRequest
  );

  /**
   * Update Shop
   * This API is used to update the shop information
   * @param updateShopRequest  (required)
   * @return Call&lt;UpdateShopResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:OPEN_API",
    "X-API-FUNCTION:dana.merchant.shop.updateShop"
  })
  @POST("dana/merchant/shop/updateShop.htm")
  Call<UpdateShopResponse> updateShop(
    @retrofit2.http.Body UpdateShopRequest updateShopRequest
  );

}

public class MerchantManagementApi {

  private static final ObjectMapper objectMapper = new ObjectMapper();

  private final MerchantManagementApiService service;

  public MerchantManagementApi(OkHttpClient client) {
    this.service = new ApiClient(client).createService(MerchantManagementApiService.class);
  }

  /**
   * Create Division
   * This API is used to create a new division
   * @param createDivisionRequest  (required)
   * @return Call&lt;CreateDivisionResponse&gt;
   */
  public CreateDivisionResponse createDivision(
    @retrofit2.http.Body CreateDivisionRequest createDivisionRequest
  ) {
    try {
      Response<CreateDivisionResponse> response = service.createDivision(createDivisionRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), CreateDivisionResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Member – Create Shop
   * Create shop under merchant or division
   * @param createShopRequest  (required)
   * @return Call&lt;CreateShopResponse&gt;
   */
  public CreateShopResponse createShop(
    @retrofit2.http.Body CreateShopRequest createShopRequest
  ) {
    try {
      Response<CreateShopResponse> response = service.createShop(createShopRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), CreateShopResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Query Division
   * This API is used to obtain information of division
   * @param queryDivisionRequest  (required)
   * @return Call&lt;QueryDivisionResponse&gt;
   */
  public QueryDivisionResponse queryDivision(
    @retrofit2.http.Body QueryDivisionRequest queryDivisionRequest
  ) {
    try {
      Response<QueryDivisionResponse> response = service.queryDivision(queryDivisionRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), QueryDivisionResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Member – Merchant Open API Check Disbursement Account
   * The interface is check merchant resource info (account balance merchant)
   * @param queryMerchantResourceRequest  (required)
   * @return Call&lt;QueryMerchantResourceResponse&gt;
   */
  public QueryMerchantResourceResponse queryMerchantResource(
    @retrofit2.http.Body QueryMerchantResourceRequest queryMerchantResourceRequest
  ) {
    try {
      Response<QueryMerchantResourceResponse> response = service.queryMerchantResource(queryMerchantResourceRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), QueryMerchantResourceResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Member – Query Shop
   * This API is used to obtain information of shop information
   * @param queryShopRequest  (required)
   * @return Call&lt;QueryShopResponse&gt;
   */
  public QueryShopResponse queryShop(
    @retrofit2.http.Body QueryShopRequest queryShopRequest
  ) {
    try {
      Response<QueryShopResponse> response = service.queryShop(queryShopRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), QueryShopResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Update Division
   * This API is used to update the division information
   * @param updateDivisionRequest  (required)
   * @return Call&lt;UpdateDivisionResponse&gt;
   */
  public UpdateDivisionResponse updateDivision(
    @retrofit2.http.Body UpdateDivisionRequest updateDivisionRequest
  ) {
    try {
      Response<UpdateDivisionResponse> response = service.updateDivision(updateDivisionRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), UpdateDivisionResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Update Shop
   * This API is used to update the shop information
   * @param updateShopRequest  (required)
   * @return Call&lt;UpdateShopResponse&gt;
   */
  public UpdateShopResponse updateShop(
    @retrofit2.http.Body UpdateShopRequest updateShopRequest
  ) {
    try {
      Response<UpdateShopResponse> response = service.updateShop(updateShopRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), UpdateShopResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

}
