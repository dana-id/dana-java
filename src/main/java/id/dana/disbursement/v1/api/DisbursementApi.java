/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.disbursement.v1.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import id.dana.invoker.ApiClient;
import id.dana.invoker.model.exception.DanaException;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.http.*;

import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;

import id.dana.disbursement.v1.model.BankAccountInquiryRequest;
import id.dana.disbursement.v1.model.BankAccountInquiryResponse;
import id.dana.disbursement.v1.model.DanaAccountInquiryRequest;
import id.dana.disbursement.v1.model.DanaAccountInquiryResponse;
import id.dana.disbursement.v1.model.TransferToBankInquiryStatusRequest;
import id.dana.disbursement.v1.model.TransferToBankInquiryStatusResponse;
import id.dana.disbursement.v1.model.TransferToBankRequest;
import id.dana.disbursement.v1.model.TransferToBankResponse;
import id.dana.disbursement.v1.model.TransferToDanaInquiryStatusRequest;
import id.dana.disbursement.v1.model.TransferToDanaInquiryStatusResponse;
import id.dana.disbursement.v1.model.TransferToDanaRequest;
import id.dana.disbursement.v1.model.TransferToDanaResponse;

import java.io.IOException;

interface DisbursementApiService {

  /**
   * Transfer to Bank Account Inquiry
   * This API is used for merchant to do inquiry Bank account info via DANA
   * @param bankAccountInquiryRequest  (required)
   * @return Call&lt;BankAccountInquiryResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/bank-account-inquiry.htm")
  Call<BankAccountInquiryResponse> bankAccountInquiry(
    @retrofit2.http.Body BankAccountInquiryRequest bankAccountInquiryRequest
  );

  /**
   * DANA Account Inquiry
   * This API is used for merchant to do account inquiry to DANA
   * @param danaAccountInquiryRequest  (required)
   * @return Call&lt;DanaAccountInquiryResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/account-inquiry.htm")
  Call<DanaAccountInquiryResponse> danaAccountInquiry(
    @retrofit2.http.Body DanaAccountInquiryRequest danaAccountInquiryRequest
  );

  /**
   * Transfer to Bank
   * This API is used for merchant to do transfer to Bank request via DANA
   * @param transferToBankRequest  (required)
   * @return Call&lt;TransferToBankResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/transfer-bank.htm")
  Call<TransferToBankResponse> transferToBank(
    @retrofit2.http.Body TransferToBankRequest transferToBankRequest
  );

  /**
   * Transfer to Bank Inquiry Status
   * This API is used for merchant to do inquiry status transfer to Bank transaction to DANA
   * @param transferToBankInquiryStatusRequest  (required)
   * @return Call&lt;TransferToBankInquiryStatusResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/transfer-bank-status.htm")
  Call<TransferToBankInquiryStatusResponse> transferToBankInquiryStatus(
    @retrofit2.http.Body TransferToBankInquiryStatusRequest transferToBankInquiryStatusRequest
  );

  /**
   * Transfer to DANA
   * This API is used for merchant to do top up request to DANA
   * @param transferToDanaRequest  (required)
   * @return Call&lt;TransferToDanaResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/topup.htm")
  Call<TransferToDanaResponse> transferToDana(
    @retrofit2.http.Body TransferToDanaRequest transferToDanaRequest
  );

  /**
   * Transfer to DANA Inquiry Status
   * This API is used for merchant to do inquiry status top up transaction to DANA
   * @param transferToDanaInquiryStatusRequest  (required)
   * @return Call&lt;TransferToDanaInquiryStatusResponse&gt;
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/emoney/topup-status.htm")
  Call<TransferToDanaInquiryStatusResponse> transferToDanaInquiryStatus(
    @retrofit2.http.Body TransferToDanaInquiryStatusRequest transferToDanaInquiryStatusRequest
  );

}

public class DisbursementApi {

  private static final ObjectMapper objectMapper = new ObjectMapper();

  private final DisbursementApiService service;

  public DisbursementApi(OkHttpClient client) {
    this.service = new ApiClient(client).createService(DisbursementApiService.class);
  }

  /**
   * Transfer to Bank Account Inquiry
   * This API is used for merchant to do inquiry Bank account info via DANA
   * @param bankAccountInquiryRequest  (required)
   * @return Call&lt;BankAccountInquiryResponse&gt;
   */
  public BankAccountInquiryResponse bankAccountInquiry(
    @retrofit2.http.Body BankAccountInquiryRequest bankAccountInquiryRequest
  ) {
    try {
      Response<BankAccountInquiryResponse> response = service.bankAccountInquiry(bankAccountInquiryRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), BankAccountInquiryResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * DANA Account Inquiry
   * This API is used for merchant to do account inquiry to DANA
   * @param danaAccountInquiryRequest  (required)
   * @return Call&lt;DanaAccountInquiryResponse&gt;
   */
  public DanaAccountInquiryResponse danaAccountInquiry(
    @retrofit2.http.Body DanaAccountInquiryRequest danaAccountInquiryRequest
  ) {
    try {
      Response<DanaAccountInquiryResponse> response = service.danaAccountInquiry(danaAccountInquiryRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), DanaAccountInquiryResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Transfer to Bank
   * This API is used for merchant to do transfer to Bank request via DANA
   * @param transferToBankRequest  (required)
   * @return Call&lt;TransferToBankResponse&gt;
   */
  public TransferToBankResponse transferToBank(
    @retrofit2.http.Body TransferToBankRequest transferToBankRequest
  ) {
    try {
      Response<TransferToBankResponse> response = service.transferToBank(transferToBankRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), TransferToBankResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Transfer to Bank Inquiry Status
   * This API is used for merchant to do inquiry status transfer to Bank transaction to DANA
   * @param transferToBankInquiryStatusRequest  (required)
   * @return Call&lt;TransferToBankInquiryStatusResponse&gt;
   */
  public TransferToBankInquiryStatusResponse transferToBankInquiryStatus(
    @retrofit2.http.Body TransferToBankInquiryStatusRequest transferToBankInquiryStatusRequest
  ) {
    try {
      Response<TransferToBankInquiryStatusResponse> response = service.transferToBankInquiryStatus(transferToBankInquiryStatusRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), TransferToBankInquiryStatusResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Transfer to DANA
   * This API is used for merchant to do top up request to DANA
   * @param transferToDanaRequest  (required)
   * @return Call&lt;TransferToDanaResponse&gt;
   */
  public TransferToDanaResponse transferToDana(
    @retrofit2.http.Body TransferToDanaRequest transferToDanaRequest
  ) {
    try {
      Response<TransferToDanaResponse> response = service.transferToDana(transferToDanaRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), TransferToDanaResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Transfer to DANA Inquiry Status
   * This API is used for merchant to do inquiry status top up transaction to DANA
   * @param transferToDanaInquiryStatusRequest  (required)
   * @return Call&lt;TransferToDanaInquiryStatusResponse&gt;
   */
  public TransferToDanaInquiryStatusResponse transferToDanaInquiryStatus(
    @retrofit2.http.Body TransferToDanaInquiryStatusRequest transferToDanaInquiryStatusRequest
  ) {
    try {
      Response<TransferToDanaInquiryStatusResponse> response = service.transferToDanaInquiryStatus(transferToDanaInquiryStatusRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), TransferToDanaInquiryStatusResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

}
