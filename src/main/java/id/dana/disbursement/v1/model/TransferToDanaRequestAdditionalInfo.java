/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.disbursement.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Additional information
 */
@JsonPropertyOrder({
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_EXTEND_INFO,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_ACCOUNT_TYPE,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_FUND_TYPE,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_EXTERNAL_DIVISION_ID,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_CHARGE_TARGET,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_ACCESS_TOKEN,
  TransferToDanaRequestAdditionalInfo.JSON_PROPERTY_CUSTOMER_ID
})
@JsonTypeName("TransferToDanaRequest_additionalInfo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class TransferToDanaRequestAdditionalInfo {
  public static final String JSON_PROPERTY_EXTEND_INFO = "extendInfo";
  @javax.annotation.Nullable
  private String extendInfo;

  public static final String JSON_PROPERTY_ACCOUNT_TYPE = "accountType";
  @javax.annotation.Nullable
  private String accountType;

  public static final String JSON_PROPERTY_FUND_TYPE = "fundType";
  @javax.annotation.Nonnull
  private String fundType;

  public static final String JSON_PROPERTY_EXTERNAL_DIVISION_ID = "externalDivisionId";
  @javax.annotation.Nullable
  private String externalDivisionId;

  /**
   * Additional information of charge target. This parameter only used for Transfer to DANA subMerchant. The value are:<br> • null<br> • DIVISION<br> • MERCHANT<br> if the value is DIVISION, externalDivisionId will be Mandatory 
   */
  public enum ChargeTargetEnum {
    DIVISION(String.valueOf("DIVISION")),
    
    MERCHANT(String.valueOf("MERCHANT")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ChargeTargetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ChargeTargetEnum fromValue(String value) {
      for (ChargeTargetEnum b : ChargeTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_CHARGE_TARGET = "chargeTarget";
  @javax.annotation.Nullable
  private ChargeTargetEnum chargeTarget;

  public static final String JSON_PROPERTY_ACCESS_TOKEN = "accessToken";
  @javax.annotation.Nullable
  private String accessToken;

  public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
  @javax.annotation.Nullable
  private String customerId;

  public TransferToDanaRequestAdditionalInfo() {
  }

  public TransferToDanaRequestAdditionalInfo extendInfo(@javax.annotation.Nullable String extendInfo) {
    
    this.extendInfo = extendInfo;
    return this;
  }

  /**
   * Additional information of extend
   * @return extendInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtendInfo() {
    return extendInfo;
  }


  @JsonProperty(JSON_PROPERTY_EXTEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtendInfo(@javax.annotation.Nullable String extendInfo) {
    this.extendInfo = extendInfo;
  }

  public TransferToDanaRequestAdditionalInfo accountType(@javax.annotation.Nullable String accountType) {
    
    this.accountType = accountType;
    return this;
  }

  /**
   * Additional information of account type
   * @return accountType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountType() {
    return accountType;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountType(@javax.annotation.Nullable String accountType) {
    this.accountType = accountType;
  }

  public TransferToDanaRequestAdditionalInfo fundType(@javax.annotation.Nonnull String fundType) {
    
    this.fundType = fundType;
    return this;
  }

  /**
   * Additional information of transfer to DANA fund type, i.e.<br> AGENT_TOPUP_FOR_USER_SETTLE 
   * @return fundType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFundType() {
    return fundType;
  }


  @JsonProperty(JSON_PROPERTY_FUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFundType(@javax.annotation.Nonnull String fundType) {
    this.fundType = fundType;
  }

  public TransferToDanaRequestAdditionalInfo externalDivisionId(@javax.annotation.Nullable String externalDivisionId) {
    
    this.externalDivisionId = externalDivisionId;
    return this;
  }

  /**
   * Additional information of external division identifier. This parameter only used for Transfer to DANA subMerchant (fundType : AGENT_TOPUP_FOR_USER_SETTLE)<br> Notes:<br> The required of this parameter is Optional, but if \"additionalInfo.chargeTarget\" has value DIVISION then the required of this parameter will be changed to Mandatory 
   * @return externalDivisionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalDivisionId() {
    return externalDivisionId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_DIVISION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalDivisionId(@javax.annotation.Nullable String externalDivisionId) {
    this.externalDivisionId = externalDivisionId;
  }

  public TransferToDanaRequestAdditionalInfo chargeTarget(@javax.annotation.Nullable ChargeTargetEnum chargeTarget) {
    
    this.chargeTarget = chargeTarget;
    return this;
  }

  /**
   * Additional information of charge target. This parameter only used for Transfer to DANA subMerchant. The value are:<br> • null<br> • DIVISION<br> • MERCHANT<br> if the value is DIVISION, externalDivisionId will be Mandatory 
   * @return chargeTarget
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARGE_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChargeTargetEnum getChargeTarget() {
    return chargeTarget;
  }


  @JsonProperty(JSON_PROPERTY_CHARGE_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChargeTarget(@javax.annotation.Nullable ChargeTargetEnum chargeTarget) {
    this.chargeTarget = chargeTarget;
  }

  public TransferToDanaRequestAdditionalInfo accessToken(@javax.annotation.Nullable String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Contains customer token, which has been obtained from binding process, refer to Account Binding & Unbinding documentation<br> If request is coming from user interaction, this field is mandatory. If not, just filled customerNumber 
   * @return accessToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessToken() {
    return accessToken;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessToken(@javax.annotation.Nullable String accessToken) {
    this.accessToken = accessToken;
  }

  public TransferToDanaRequestAdditionalInfo customerId(@javax.annotation.Nullable String customerId) {
    
    this.customerId = customerId;
    return this;
  }

  /**
   * Public user identifier of DANA user.<br> Notes: If used, requires customerNumber to be filled with default phone number literal \"620000000000\" 
   * @return customerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomerId() {
    return customerId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerId(@javax.annotation.Nullable String customerId) {
    this.customerId = customerId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferToDanaRequestAdditionalInfo transferToDanaRequestAdditionalInfo = (TransferToDanaRequestAdditionalInfo) o;
    return Objects.equals(this.extendInfo, transferToDanaRequestAdditionalInfo.extendInfo) &&
        Objects.equals(this.accountType, transferToDanaRequestAdditionalInfo.accountType) &&
        Objects.equals(this.fundType, transferToDanaRequestAdditionalInfo.fundType) &&
        Objects.equals(this.externalDivisionId, transferToDanaRequestAdditionalInfo.externalDivisionId) &&
        Objects.equals(this.chargeTarget, transferToDanaRequestAdditionalInfo.chargeTarget) &&
        Objects.equals(this.accessToken, transferToDanaRequestAdditionalInfo.accessToken) &&
        Objects.equals(this.customerId, transferToDanaRequestAdditionalInfo.customerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendInfo, accountType, fundType, externalDivisionId, chargeTarget, accessToken, customerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferToDanaRequestAdditionalInfo {\n");
    sb.append("    extendInfo: ").append(toIndentedString(extendInfo)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    fundType: ").append(toIndentedString(fundType)).append("\n");
    sb.append("    externalDivisionId: ").append(toIndentedString(externalDivisionId)).append("\n");
    sb.append("    chargeTarget: ").append(toIndentedString(chargeTarget)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
