/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.paymentgateway.v1.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import id.dana.invoker.ApiClient;
import id.dana.invoker.model.exception.DanaException;

import retrofit2.Call;
import retrofit2.Response;
import retrofit2.http.*;

import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;

import id.dana.paymentgateway.v1.model.CancelOrderRequest;
import id.dana.paymentgateway.v1.model.CancelOrderResponse;
import id.dana.paymentgateway.v1.model.ConsultPayRequest;
import id.dana.paymentgateway.v1.model.ConsultPayResponse;
import id.dana.paymentgateway.v1.model.CreateOrderRequest;
import id.dana.paymentgateway.v1.model.CreateOrderResponse;
import id.dana.paymentgateway.v1.model.QueryPaymentRequest;
import id.dana.paymentgateway.v1.model.QueryPaymentResponse;
import id.dana.paymentgateway.v1.model.RefundOrderRequest;
import id.dana.paymentgateway.v1.model.RefundOrderResponse;

import java.io.IOException;

interface PaymentGatewayApiService {

  /**
   * Cancel Order - Payment Gateway
   * This API is used to cancel the order from merchant's platform to DANA
   * @param cancelOrderRequest  (required)
   * @return Call<CancelOrderResponse>
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/117">Cancel Order - Payment Gateway Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("payment-gateway/v1.0/debit/cancel.htm")
  Call<CancelOrderResponse> cancelOrder(
    @retrofit2.http.Body CancelOrderRequest cancelOrderRequest
  );

  /**
   * Consult Pay - Payment Gateway
   * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
   * @param consultPayRequest  (required)
   * @return Call<ConsultPayResponse>
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/237">Consult Pay - Payment Gateway Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("v1.0/payment-gateway/consult-pay.htm")
  Call<ConsultPayResponse> consultPay(
    @retrofit2.http.Body ConsultPayRequest consultPayRequest
  );

  /**
   * Create Order - Payment Gateway
   * This API is used for merchant to create order in DANA side
   * @param createOrderRequest  (required)
   * @return Call<CreateOrderResponse>
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/243">Create Order - Payment Gateway Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("payment-gateway/v1.0/debit/payment-host-to-host.htm")
  Call<CreateOrderResponse> createOrder(
    @retrofit2.http.Body CreateOrderRequest createOrderRequest
  );

  /**
   * Query Payment - Payment Gateway
   * This API is used to inquiry payment status and information from merchant's platform to DANA
   * @param queryPaymentRequest  (required)
   * @return Call<QueryPaymentResponse>
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/126">Query Payment - Payment Gateway Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("payment-gateway/v1.0/debit/status.htm")
  Call<QueryPaymentResponse> queryPayment(
    @retrofit2.http.Body QueryPaymentRequest queryPaymentRequest
  );

  /**
   * Refund Order - Payment Gateway
   * This API is used to refund the order from merchant's platform to DANA
   * @param refundOrderRequest  (required)
   * @return Call<RefundOrderResponse>
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/127">Refund Order - Payment Gateway Documentation</a>
   */
  @Headers({
    "Content-Type:application/json",
    "X-API-TYPE:SNAP_B2B"
  })
  @POST("payment-gateway/v1.0/debit/refund.htm")
  Call<RefundOrderResponse> refundOrder(
    @retrofit2.http.Body RefundOrderRequest refundOrderRequest
  );

}

public class PaymentGatewayApi {

  private static final ObjectMapper objectMapper = new ObjectMapper();

  private final PaymentGatewayApiService service;

  public PaymentGatewayApi(OkHttpClient client) {
    this.service = new ApiClient(client).createService(PaymentGatewayApiService.class);
  }

  /**
   * Cancel Order - Payment Gateway
   * This API is used to cancel the order from merchant's platform to DANA
   * @param cancelOrderRequest  (required)
   * @return CancelOrderResponse
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/117">Cancel Order - Payment Gateway Documentation</a>
   */
  public CancelOrderResponse cancelOrder(
    @retrofit2.http.Body CancelOrderRequest cancelOrderRequest
  ) {
    try {
      Response<CancelOrderResponse> response = service.cancelOrder(cancelOrderRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), CancelOrderResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Consult Pay - Payment Gateway
   * This API is used to consult the list of payment methods or payment channels that user has and used in certain transactions or orders
   * @param consultPayRequest  (required)
   * @return ConsultPayResponse
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/237">Consult Pay - Payment Gateway Documentation</a>
   */
  public ConsultPayResponse consultPay(
    @retrofit2.http.Body ConsultPayRequest consultPayRequest
  ) {
    try {
      Response<ConsultPayResponse> response = service.consultPay(consultPayRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), ConsultPayResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Create Order - Payment Gateway
   * This API is used for merchant to create order in DANA side
   * @param createOrderRequest  (required)
   * @return CreateOrderResponse
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/243">Create Order - Payment Gateway Documentation</a>
   */
  public CreateOrderResponse createOrder(
    @retrofit2.http.Body CreateOrderRequest createOrderRequest
  ) {
    try {
      Response<CreateOrderResponse> response = service.createOrder(createOrderRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), CreateOrderResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Query Payment - Payment Gateway
   * This API is used to inquiry payment status and information from merchant's platform to DANA
   * @param queryPaymentRequest  (required)
   * @return QueryPaymentResponse
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/126">Query Payment - Payment Gateway Documentation</a>
   */
  public QueryPaymentResponse queryPayment(
    @retrofit2.http.Body QueryPaymentRequest queryPaymentRequest
  ) {
    try {
      Response<QueryPaymentResponse> response = service.queryPayment(queryPaymentRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), QueryPaymentResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

  /**
   * Refund Order - Payment Gateway
   * This API is used to refund the order from merchant's platform to DANA
   * @param refundOrderRequest  (required)
   * @return RefundOrderResponse
   * 
   * @see <a href="https://dashboard.dana.id/api-docs/read/127">Refund Order - Payment Gateway Documentation</a>
   */
  public RefundOrderResponse refundOrder(
    @retrofit2.http.Body RefundOrderRequest refundOrderRequest
  ) {
    try {
      Response<RefundOrderResponse> response = service.refundOrder(refundOrderRequest).execute();
      if (response.isSuccessful()) {
        return response.body();
      } else {
        try (ResponseBody errorBody = response.errorBody()) {
          if (errorBody != null) {
            return objectMapper.readValue(errorBody.string(), RefundOrderResponse.class);
          } else {
            throw new DanaException("Empty error body");
          }
        }
      }
    } catch (IOException e) {
      throw new DanaException("Network error", e);
    }
  }

}
