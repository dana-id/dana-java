/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.paymentgateway.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.dana.paymentgateway.v1.model.Money;
import id.dana.paymentgateway.v1.model.PayOptionAdditionalInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PayOptionDetail
 */
@JsonPropertyOrder({
  PayOptionDetail.JSON_PROPERTY_PAY_METHOD,
  PayOptionDetail.JSON_PROPERTY_PAY_OPTION,
  PayOptionDetail.JSON_PROPERTY_TRANS_AMOUNT,
  PayOptionDetail.JSON_PROPERTY_FEE_AMOUNT,
  PayOptionDetail.JSON_PROPERTY_CARD_TOKEN,
  PayOptionDetail.JSON_PROPERTY_MERCHANT_TOKEN,
  PayOptionDetail.JSON_PROPERTY_ADDITIONAL_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class PayOptionDetail {
  /**
   * Payment method that used to payment. The enums:<br>   * BALANCE - Payment method with balance<br>   * COUPON - Payment method with coupon<br>   * NET_BANKING - Payment method with internet banking<br>   * CREDIT_CARD - Payment method with credit card<br>   * DEBIT_CARD - Payment method with debit card<br>   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>   * OTC - Payment method with OTC<br>   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>   * ONLINE_CREDIT - Payment method with online Credit<br>   * LOAN_CREDIT - Payment method with DANA Cicil<br>   * NETWORK_PAY - Payment method with e-wallet<br>   * CARD - Payment method with card<br> 
   */
  public enum PayMethodEnum {
    /**
     * Payment method with balance
     */
    BALANCE(String.valueOf("BALANCE")),
    
    /**
     * Payment method with coupon
     */
    COUPON(String.valueOf("COUPON")),
    
    /**
     * Payment method with internet banking
     */
    NET_BANKING(String.valueOf("NET_BANKING")),
    
    /**
     * Payment method with credit card
     */
    CREDIT_CARD(String.valueOf("CREDIT_CARD")),
    
    /**
     * Payment method with debit card
     */
    DEBIT_CARD(String.valueOf("DEBIT_CARD")),
    
    /**
     * Payment method with virtual account
     */
    VIRTUAL_ACCOUNT(String.valueOf("VIRTUAL_ACCOUNT")),
    
    /**
     * Payment method with OTC
     */
    OTC(String.valueOf("OTC")),
    
    /**
     * Payment method with direct debit of credit card
     */
    DIRECT_DEBIT_CREDIT_CARD(String.valueOf("DIRECT_DEBIT_CREDIT_CARD")),
    
    /**
     * Payment method with direct debit of debit card
     */
    DIRECT_DEBIT_DEBIT_CARD(String.valueOf("DIRECT_DEBIT_DEBIT_CARD")),
    
    /**
     * Payment method with online Credit
     */
    ONLINE_CREDIT(String.valueOf("ONLINE_CREDIT")),
    
    /**
     * Payment method with DANA Cicil
     */
    LOAN_CREDIT(String.valueOf("LOAN_CREDIT")),
    
    /**
     * Payment method with e-wallet
     */
    NETWORK_PAY(String.valueOf("NETWORK_PAY")),
    
    /**
     * Payment method with card
     */
    CARD(String.valueOf("CARD")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    PayMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PayMethodEnum fromValue(String value) {
      for (PayMethodEnum b : PayMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_PAY_METHOD = "payMethod";
  @javax.annotation.Nonnull
  private PayMethodEnum payMethod;

  /**
   * Payment option that available to used to payment, depends on the payment method. The enums:<br>   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>   * NETWORK_PAY_PG_CARD - Payment method with Card<br>   * NETWORK_PAY_PG_QRIS - Payment method with QRIS<br>   * NETWORK_PAY_PC_INDOMARET - Payment method with Indomaret<br>   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>   * VIRTUAL_ACCOUNT_PANI - Payment method with Panin virtual account<br> 
   */
  public enum PayOptionEnum {
    /**
     * Payment method with ShopeePay e-wallet
     */
    NETWORK_PAY_PG_SPAY(String.valueOf("NETWORK_PAY_PG_SPAY")),
    
    /**
     * Payment method with OVO e-wallet
     */
    NETWORK_PAY_PG_OVO(String.valueOf("NETWORK_PAY_PG_OVO")),
    
    /**
     * Payment method with GoPay e-wallet
     */
    NETWORK_PAY_PG_GOPAY(String.valueOf("NETWORK_PAY_PG_GOPAY")),
    
    /**
     * Payment method with LinkAja e-wallet
     */
    NETWORK_PAY_PG_LINKAJA(String.valueOf("NETWORK_PAY_PG_LINKAJA")),
    
    /**
     * Payment method with Card
     */
    NETWORK_PAY_PG_CARD(String.valueOf("NETWORK_PAY_PG_CARD")),
    
    /**
     * Payment method with QRIS
     */
    NETWORK_PAY_PG_QRIS(String.valueOf("NETWORK_PAY_PG_QRIS")),
    
    /**
     * Payment method with Indomaret
     */
    NETWORK_PAY_PC_INDOMARET(String.valueOf("NETWORK_PAY_PC_INDOMARET")),
    
    /**
     * Payment method with BCA virtual account
     */
    VIRTUAL_ACCOUNT_BCA(String.valueOf("VIRTUAL_ACCOUNT_BCA")),
    
    /**
     * Payment method with BNI virtual account
     */
    VIRTUAL_ACCOUNT_BNI(String.valueOf("VIRTUAL_ACCOUNT_BNI")),
    
    /**
     * Payment method with Mandiri virtual account
     */
    VIRTUAL_ACCOUNT_MANDIRI(String.valueOf("VIRTUAL_ACCOUNT_MANDIRI")),
    
    /**
     * Payment method with BRI virtual account
     */
    VIRTUAL_ACCOUNT_BRI(String.valueOf("VIRTUAL_ACCOUNT_BRI")),
    
    /**
     * Payment method with BTPN virtual account
     */
    VIRTUAL_ACCOUNT_BTPN(String.valueOf("VIRTUAL_ACCOUNT_BTPN")),
    
    /**
     * Payment method with CIMB virtual account
     */
    VIRTUAL_ACCOUNT_CIMB(String.valueOf("VIRTUAL_ACCOUNT_CIMB")),
    
    /**
     * Payment method with Permata virtual account
     */
    VIRTUAL_ACCOUNT_PERMATA(String.valueOf("VIRTUAL_ACCOUNT_PERMATA")),
    
    /**
     * Payment method with Panin virtual account
     */
    VIRTUAL_ACCOUNT_PANI(String.valueOf("VIRTUAL_ACCOUNT_PANI")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    PayOptionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PayOptionEnum fromValue(String value) {
      for (PayOptionEnum b : PayOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_PAY_OPTION = "payOption";
  @javax.annotation.Nonnull
  private PayOptionEnum payOption;

  public static final String JSON_PROPERTY_TRANS_AMOUNT = "transAmount";
  @javax.annotation.Nonnull
  private Money transAmount;

  public static final String JSON_PROPERTY_FEE_AMOUNT = "feeAmount";
  @javax.annotation.Nullable
  private Money feeAmount;

  public static final String JSON_PROPERTY_CARD_TOKEN = "cardToken";
  @javax.annotation.Nullable
  private String cardToken;

  public static final String JSON_PROPERTY_MERCHANT_TOKEN = "merchantToken";
  @javax.annotation.Nullable
  private String merchantToken;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  @javax.annotation.Nullable
  private PayOptionAdditionalInfo additionalInfo;

  public PayOptionDetail() {
  }

  public PayOptionDetail payMethod(@javax.annotation.Nonnull PayMethodEnum payMethod) {
    
    this.payMethod = payMethod;
    return this;
  }

  /**
   * Payment method that used to payment. The enums:<br>   * BALANCE - Payment method with balance<br>   * COUPON - Payment method with coupon<br>   * NET_BANKING - Payment method with internet banking<br>   * CREDIT_CARD - Payment method with credit card<br>   * DEBIT_CARD - Payment method with debit card<br>   * VIRTUAL_ACCOUNT - Payment method with virtual account<br>   * OTC - Payment method with OTC<br>   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card<br>   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card<br>   * ONLINE_CREDIT - Payment method with online Credit<br>   * LOAN_CREDIT - Payment method with DANA Cicil<br>   * NETWORK_PAY - Payment method with e-wallet<br>   * CARD - Payment method with card<br> 
   * @return payMethod
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PayMethodEnum getPayMethod() {
    return payMethod;
  }


  @JsonProperty(JSON_PROPERTY_PAY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayMethod(@javax.annotation.Nonnull PayMethodEnum payMethod) {
    this.payMethod = payMethod;
  }

  public PayOptionDetail payOption(@javax.annotation.Nonnull PayOptionEnum payOption) {
    
    this.payOption = payOption;
    return this;
  }

  /**
   * Payment option that available to used to payment, depends on the payment method. The enums:<br>   * NETWORK_PAY_PG_SPAY - Payment method with ShopeePay e-wallet<br>   * NETWORK_PAY_PG_OVO - Payment method with OVO e-wallet<br>   * NETWORK_PAY_PG_GOPAY - Payment method with GoPay e-wallet<br>   * NETWORK_PAY_PG_LINKAJA - Payment method with LinkAja e-wallet<br>   * NETWORK_PAY_PG_CARD - Payment method with Card<br>   * NETWORK_PAY_PG_QRIS - Payment method with QRIS<br>   * NETWORK_PAY_PC_INDOMARET - Payment method with Indomaret<br>   * VIRTUAL_ACCOUNT_BCA - Payment method with BCA virtual account<br>   * VIRTUAL_ACCOUNT_BNI - Payment method with BNI virtual account<br>   * VIRTUAL_ACCOUNT_MANDIRI - Payment method with Mandiri virtual account<br>   * VIRTUAL_ACCOUNT_BRI - Payment method with BRI virtual account<br>   * VIRTUAL_ACCOUNT_BTPN - Payment method with BTPN virtual account<br>   * VIRTUAL_ACCOUNT_CIMB - Payment method with CIMB virtual account<br>   * VIRTUAL_ACCOUNT_PERMATA - Payment method with Permata virtual account<br>   * VIRTUAL_ACCOUNT_PANI - Payment method with Panin virtual account<br> 
   * @return payOption
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAY_OPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PayOptionEnum getPayOption() {
    return payOption;
  }


  @JsonProperty(JSON_PROPERTY_PAY_OPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayOption(@javax.annotation.Nonnull PayOptionEnum payOption) {
    this.payOption = payOption;
  }

  public PayOptionDetail transAmount(@javax.annotation.Nonnull Money transAmount) {
    
    this.transAmount = transAmount;
    return this;
  }

  /**
   * Get transAmount
   * @return transAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Money getTransAmount() {
    return transAmount;
  }


  @JsonProperty(JSON_PROPERTY_TRANS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransAmount(@javax.annotation.Nonnull Money transAmount) {
    this.transAmount = transAmount;
  }

  public PayOptionDetail feeAmount(@javax.annotation.Nullable Money feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * Get feeAmount
   * @return feeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getFeeAmount() {
    return feeAmount;
  }


  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeAmount(@javax.annotation.Nullable Money feeAmount) {
    this.feeAmount = feeAmount;
  }

  public PayOptionDetail cardToken(@javax.annotation.Nullable String cardToken) {
    
    this.cardToken = cardToken;
    return this;
  }

  /**
   * Token that used for payment with card
   * @return cardToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardToken() {
    return cardToken;
  }


  @JsonProperty(JSON_PROPERTY_CARD_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardToken(@javax.annotation.Nullable String cardToken) {
    this.cardToken = cardToken;
  }

  public PayOptionDetail merchantToken(@javax.annotation.Nullable String merchantToken) {
    
    this.merchantToken = merchantToken;
    return this;
  }

  /**
   * Merchant token used for this payment
   * @return merchantToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantToken() {
    return merchantToken;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantToken(@javax.annotation.Nullable String merchantToken) {
    this.merchantToken = merchantToken;
  }

  public PayOptionDetail additionalInfo(@javax.annotation.Nullable PayOptionAdditionalInfo additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PayOptionAdditionalInfo getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(@javax.annotation.Nullable PayOptionAdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayOptionDetail payOptionDetail = (PayOptionDetail) o;
    return Objects.equals(this.payMethod, payOptionDetail.payMethod) &&
        Objects.equals(this.payOption, payOptionDetail.payOption) &&
        Objects.equals(this.transAmount, payOptionDetail.transAmount) &&
        Objects.equals(this.feeAmount, payOptionDetail.feeAmount) &&
        Objects.equals(this.cardToken, payOptionDetail.cardToken) &&
        Objects.equals(this.merchantToken, payOptionDetail.merchantToken) &&
        Objects.equals(this.additionalInfo, payOptionDetail.additionalInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payMethod, payOption, transAmount, feeAmount, cardToken, merchantToken, additionalInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayOptionDetail {\n");
    sb.append("    payMethod: ").append(toIndentedString(payMethod)).append("\n");
    sb.append("    payOption: ").append(toIndentedString(payOption)).append("\n");
    sb.append("    transAmount: ").append(toIndentedString(transAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("    merchantToken: ").append(toIndentedString(merchantToken)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
