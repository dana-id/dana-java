/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.paymentgateway.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ActorContext
 */
@JsonPropertyOrder({
  ActorContext.JSON_PROPERTY_ACTOR_ID,
  ActorContext.JSON_PROPERTY_ACTOR_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ActorContext {
  public static final String JSON_PROPERTY_ACTOR_ID = "actorId";
  @javax.annotation.Nullable
  private String actorId;

  /**
   * Actor type. The enums:<br> * USER - User<br> * MERCHANT - Merchant<br> * MERCHANT_OPERATOR - Merchant operator<br> * BACK_OFFICE - Back office<br> * SYSTEM - System<br> 
   */
  public enum ActorTypeEnum {
    /**
     * User
     */
    USER(String.valueOf("USER")),
    
    /**
     * Merchant
     */
    MERCHANT(String.valueOf("MERCHANT")),
    
    /**
     * Merchant operator
     */
    MERCHANT_OPERATOR(String.valueOf("MERCHANT_OPERATOR")),
    
    /**
     * Back office
     */
    BACK_OFFICE(String.valueOf("BACK_OFFICE")),
    
    /**
     * System
     */
    SYSTEM(String.valueOf("SYSTEM")),
    
    /**
     * To handle empty string value
     */
    UNSPECIFIED(String.valueOf(""));

    private String value;

    ActorTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActorTypeEnum fromValue(String value) {
      for (ActorTypeEnum b : ActorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }
  public static final String JSON_PROPERTY_ACTOR_TYPE = "actorType";
  @javax.annotation.Nullable
  private ActorTypeEnum actorType;

  public ActorContext() {
  }

  public ActorContext actorId(@javax.annotation.Nullable String actorId) {
    
    this.actorId = actorId;
    return this;
  }

  /**
   * Actor identifier
   * @return actorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActorId() {
    return actorId;
  }


  @JsonProperty(JSON_PROPERTY_ACTOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActorId(@javax.annotation.Nullable String actorId) {
    this.actorId = actorId;
  }

  public ActorContext actorType(@javax.annotation.Nullable ActorTypeEnum actorType) {
    
    this.actorType = actorType;
    return this;
  }

  /**
   * Actor type. The enums:<br> * USER - User<br> * MERCHANT - Merchant<br> * MERCHANT_OPERATOR - Merchant operator<br> * BACK_OFFICE - Back office<br> * SYSTEM - System<br> 
   * @return actorType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActorTypeEnum getActorType() {
    return actorType;
  }


  @JsonProperty(JSON_PROPERTY_ACTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActorType(@javax.annotation.Nullable ActorTypeEnum actorType) {
    this.actorType = actorType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActorContext actorContext = (ActorContext) o;
    return Objects.equals(this.actorId, actorContext.actorId) &&
        Objects.equals(this.actorType, actorContext.actorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actorId, actorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActorContext {\n");
    sb.append("    actorId: ").append(toIndentedString(actorId)).append("\n");
    sb.append("    actorType: ").append(toIndentedString(actorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
