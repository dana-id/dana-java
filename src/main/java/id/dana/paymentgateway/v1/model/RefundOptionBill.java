/**
 * NOTE: This class is auto generated by DANA Indonesia.
 * Do not edit the class manually.
 */


package id.dana.paymentgateway.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import id.dana.paymentgateway.v1.model.Money;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RefundOptionBill
 */
@JsonPropertyOrder({
  RefundOptionBill.JSON_PROPERTY_PAY_METHOD,
  RefundOptionBill.JSON_PROPERTY_TRANS_AMOUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class RefundOptionBill {
  /**
   * Payment method name. The enums:&lt;br&gt;   * BALANCE - Payment method with balance&lt;br&gt;   * COUPON - Payment method with coupon&lt;br&gt;   * NET_BANKING - Payment method with internet banking&lt;br&gt;   * CREDIT_CARD - Payment method with credit card&lt;br&gt;   * DEBIT_CARD - Payment method with debit card&lt;br&gt;   * VIRTUAL_ACCOUNT - Payment method with virtual account&lt;br&gt;   * OTC - Payment method with OTC&lt;br&gt;   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card&lt;br&gt;   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card&lt;br&gt;   * ONLINE_CREDIT - Payment method with online Credit&lt;br&gt;   * LOAN_CREDIT - Payment method with DANA Cicil&lt;br&gt; 
   */
  public enum PayMethodEnum {
    BALANCE(String.valueOf("BALANCE")),
    
    COUPON(String.valueOf("COUPON")),
    
    NET_BANKING(String.valueOf("NET_BANKING")),
    
    CREDIT_CARD(String.valueOf("CREDIT_CARD")),
    
    DEBIT_CARD(String.valueOf("DEBIT_CARD")),
    
    VIRTUAL_ACCOUNT(String.valueOf("VIRTUAL_ACCOUNT")),
    
    OTC(String.valueOf("OTC")),
    
    DIRECT_DEBIT_CREDIT_CARD(String.valueOf("DIRECT_DEBIT_CREDIT_CARD")),
    
    DIRECT_DEBIT_DEBIT_CARD(String.valueOf("DIRECT_DEBIT_DEBIT_CARD")),
    
    ONLINE_CREDIT(String.valueOf("ONLINE_CREDIT")),
    
    LOAN_CREDIT(String.valueOf("LOAN_CREDIT")),
    
    UNSPECIFIED(String.valueOf(""));

    private String value;

    PayMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PayMethodEnum fromValue(String value) {
      for (PayMethodEnum b : PayMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAY_METHOD = "payMethod";
  @javax.annotation.Nullable
  private PayMethodEnum payMethod;

  public static final String JSON_PROPERTY_TRANS_AMOUNT = "transAmount";
  @javax.annotation.Nullable
  private Money transAmount;

  public RefundOptionBill() {
  }

  public RefundOptionBill payMethod(@javax.annotation.Nullable PayMethodEnum payMethod) {
    
    this.payMethod = payMethod;
    return this;
  }

  /**
   * Payment method name. The enums:&lt;br&gt;   * BALANCE - Payment method with balance&lt;br&gt;   * COUPON - Payment method with coupon&lt;br&gt;   * NET_BANKING - Payment method with internet banking&lt;br&gt;   * CREDIT_CARD - Payment method with credit card&lt;br&gt;   * DEBIT_CARD - Payment method with debit card&lt;br&gt;   * VIRTUAL_ACCOUNT - Payment method with virtual account&lt;br&gt;   * OTC - Payment method with OTC&lt;br&gt;   * DIRECT_DEBIT_CREDIT_CARD - Payment method with direct debit of credit card&lt;br&gt;   * DIRECT_DEBIT_DEBIT_CARD - Payment method with direct debit of debit card&lt;br&gt;   * ONLINE_CREDIT - Payment method with online Credit&lt;br&gt;   * LOAN_CREDIT - Payment method with DANA Cicil&lt;br&gt; 
   * @return payMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PayMethodEnum getPayMethod() {
    return payMethod;
  }


  @JsonProperty(JSON_PROPERTY_PAY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayMethod(@javax.annotation.Nullable PayMethodEnum payMethod) {
    this.payMethod = payMethod;
  }

  public RefundOptionBill transAmount(@javax.annotation.Nullable Money transAmount) {
    
    this.transAmount = transAmount;
    return this;
  }

  /**
   * Trans amount. Contains two sub-fields:&lt;br&gt; 1. Value: Transaction amount, including the cents&lt;br&gt; 2. Currency: Currency code based on ISO&lt;br&gt; 
   * @return transAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Money getTransAmount() {
    return transAmount;
  }


  @JsonProperty(JSON_PROPERTY_TRANS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransAmount(@javax.annotation.Nullable Money transAmount) {
    this.transAmount = transAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundOptionBill refundOptionBill = (RefundOptionBill) o;
    return Objects.equals(this.payMethod, refundOptionBill.payMethod) &&
        Objects.equals(this.transAmount, refundOptionBill.transAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payMethod, transAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundOptionBill {\n");
    sb.append("    payMethod: ").append(toIndentedString(payMethod)).append("\n");
    sb.append("    transAmount: ").append(toIndentedString(transAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

